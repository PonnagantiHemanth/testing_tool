// -------------------------------------
// Pipeline Configuration Section
properties([
    parameters([
        string(name: 'PROJECT_NAME', defaultValue: 'hadron', description: 'firmware hex file name', ),
        string(name: 'BRANCH_NAME', defaultValue: 'quark', description: 'project branch name on goldenpass', ),
        string(name: 'COMPATIBLE_TAGS', defaultValue: '',
            description: 'previous versions to be compatible with (up to 3 versions)', ),
        string(name: 'CODE_TAG', defaultValue: '', description: 'optional tag on goldenpass', ),
        string(name: 'CODE_PATCHSET', defaultValue: '', description: 'optional patchset on goldenpass', ),
        string(name: 'SOC_NAME', defaultValue: 'HADRON', description: 'System on a Chip definition', ),
        string(name: 'TEST_CONFIG', defaultValue: 'HADRON/PLATFORM/KOSMOS_KPD',
            description: 'PRODUCT pyTestBox test configuration', ),
        string(name: 'SETUP_CONFIG', defaultValue: 'MESON/BLE_PRO/MEZZY/SETUP/HADRON/PLATFORM/ESSENTIAL_DFU',
            description: 'Setup Configuration', ),
        string(name: 'PYTESTBOX_BRANCH_NAME', defaultValue: '*/develop', description: 'pyTestBox repo branch name', ),
    ]),
// End of Pipeline Configuration Section
// -------------------------------------
    pipelineTriggers([
        // Trigger on every update on master 
        gerrit(
            serverName: 'goldenpass',
            gerritProjects: [[
                compareType: 'PLAIN',
                pattern: "ccp_fw/${params.BRANCH_NAME}",
                branches: [[ compareType: 'PLAIN', pattern: 'master' ]],
                disableStrictForbiddenFileVerification: false
            ]],
            triggerOnEvents: [
                refUpdated(),
            ]
        )
    ]),
])

timestamps {

    node (label: "${params.PROJECT_NAME} && kosmos_v2") {
        stage ('Test Execution Job - Checkout') {
            checkout(
                [$class: 'GitSCM',
                    branches: [[name: "${params.PYTESTBOX_BRANCH_NAME}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: scm.extensions + [[$class: 'CleanCheckout'],
                        [$class: 'PruneStaleBranch'], pruneTags(true),
                        [$class: 'SubmoduleOption',
                        disableSubmodules: false,
                        parentCredentials: true,
                        recursiveSubmodules: true,
                        reference: '',
                        trackingSubmodules: false
                    ]],
                    submoduleCfg: [],
                    userRemoteConfigs: [
                     [credentialsId: 'GithubProductsCIToken',
                      url: "https://github.com/Logitech/py-test-box.git"]
                    ]
                ]
            )
        } // End of stage ('Test Execution Job - Checkout')

        stage ('Test Execution Job - Build') {
            script {
                // Delete .so files in /tmp that have been untouched for more than a day
                sh """
                  sudo find /tmp -name *.so -mtime +1 -user Jenkins -delete
                """
                // Shell Integration Test step - framework initialization
                sh """
                python3 PYTESTBOX/LIBS/PYSETUP/pyEnvChecker.py
                """
                // Get Node Name
                def node_name = "${NODE_NAME}"
                clean_node_name = node_name.replaceAll("\\s","_")
                echo "The Node Name is: ${clean_node_name}"
                // Shell Integration Test step - voltage calibration
                sh """
                python3 PYTESTBOX/CICD/ciscripts/power_supply.py -i -g -c -e
                """

                timeout(time: 60, unit: 'MINUTES', activity: true) {
                    // Shell Integration Test step - tests execution
                    sh """
                        python3 PYTESTBOX/TESTS/main.py  \
                            --file=PYTESTBOX/TESTS/SETTINGS/testFilter.txt \
                            --variant=PRODUCT/${params.TEST_CONFIG} \
                            --product=PYTESTBOX \
                            --target=DEVICE \
                            --output=console,log,junit,jrl \
                            --level=Interface,Business,Functionality,ErrorHandling,Robustness,Security,Time-consuming
                    """
                }

                // Save JUnit Results
                junit "**/LOCAL/**/${params.TEST_CONFIG}/**/*.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "**/LOCAL/**/${params.TEST_CONFIG}/**/log/*.log",
                    caseSensitive: true, defaultExcludes: true, fingerprint: false, onlyIfSuccessful: false
            }
        } // End of stage ('Test Execution Job - Build')
    } // End of node (label: "${params.PROJECT_NAME}")
} // End of timestamps
