// -------------------------------------
// Pipeline Configuration Section
properties([
    parameters([
        string(name: 'PYTESTBOX_BRANCH_NAME', defaultValue: '*/develop', description: 'pyTestBox repo branch name', ),
        string(name: 'BRANCH_NAME', defaultValue: 'nrf52_dual_bank', description: 'Project branch name on goldenpass', ),
        string(name: 'PROJECT_NAME', defaultValue: 'hadron', description: 'Project name', ),
        string(name: 'CODE_TAG', defaultValue: '', description: 'optional tag on goldenpass', ),
        string(name: 'CODE_PATCHSET', defaultValue: '', description: 'optional patchset on goldenpass', ),
        string(name: 'SLOT_0_BRANCH_NAME', defaultValue: 'quark', description: 'First slot branch name on goldenpasss', ),
        string(name: 'SLOT_1_BRANCH_NAME', defaultValue: 'quark', description: 'Second slot branch name on goldenpasss', ),
        string(name: 'SLOT_0_PROJECT_NAME', defaultValue: 'hadron', description: 'First slot project name', ),
        string(name: 'SLOT_1_PROJECT_NAME', defaultValue: 'hadron', description: 'Second slot project name', ),
        string(name: 'SETUP_CONFIG', defaultValue: 'MESON/BLE_PRO/MEZZY/SETUP/HADRON/PLATFORM/DUAL_BANK', description: 'Setup Configuration', ),
        string(name: 'TEST_CONFIG', defaultValue: 'HADRON/PLATFORM/DUAL_BANK', description: 'PRODUCT pyTestBox test configuration', )
  ]),
// End of Pipeline Configuration Section
// -------------------------------------
    pipelineTriggers([
        // Trigger every sunday  between 12:00 AM (midnight) to 7:59 AM
        cron('H H(0-7) * * 0'),
        // Trigger on every update on master
        gerrit(
            serverName: 'goldenpass',
            gerritProjects: [[
                compareType: 'PLAIN',
                pattern: "ccp_fw/${params.BRANCH_NAME}",
                branches: [[ compareType: 'PLAIN', pattern: 'master' ]],
                disableStrictForbiddenFileVerification: false
            ]],
            triggerOnEvents: [
                patchsetCreated(excludeDrafts: true, excludeNoCodeChange: true)
            ]
        )
    ]),
])

timestamps {
    node (label: "builder_ci && dual_bank") {
        stage ('Build Job - Checkout') {
            if (env.GERRIT_CHANGE_SUBJECT && env.GERRIT_CHANGE_OWNER_NAME) {
                echo "ChangeLog: ${env.GERRIT_CHANGE_SUBJECT} from ${env.GERRIT_CHANGE_OWNER_NAME}"
            }
            if (env.GERRIT_REFSPEC) {
                ref_spec = env.GERRIT_REFSPEC
                branch_name = env.GERRIT_PATCHSET_REVISION
            }
            else
            {
                ref_spec = '+refs/heads/*:refs/remotes/origin/*'
                branch_name = '*/master'
            }
            echo "Refspec for checkout: ${ref_spec}"
            checkout([$class: 'GitSCM',
                branches: [[name: "${branch_name}"]], doGenerateSubmoduleConfigurations: false,
                extensions: [[ $class: 'CleanCheckout'],
                    [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false,
                    recursiveSubmodules: false, reference: '', trackingSubmodules: false
                ]],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: 'Jenkins user',
                    url: "ssh://Jenkins@goldenpass.logitech.com:29418/ccp_fw/${params.BRANCH_NAME}",
                    refspec: "${ref_spec}"
                ]]
            ])
        } // End of stage ('Build Job - Checkout')

        stage ('Build Job - Build') {
            echo "PROJECT_NAME = ${params.PROJECT_NAME}"
            if (params.CODE_PATCHSET != '') {
              // Shell build step - sync on a patchset
              sh "git fetch ssh://Jenkins@goldenpass.logitech.com:29418/ccp_fw/${params.BRANCH_NAME} refs/changes/${params.CODE_PATCHSET}"
              sh "git checkout FETCH_HEAD"
            } else {
              if (params.CODE_TAG != '') {
                // Shell build step - sync on a tag
                sh "git checkout tags/${params.CODE_TAG}"
              }
            }
            sh "git submodule update --init"
            sh "git submodule sync --recursive"
            sh "git submodule update --init --recursive"
            sh "git clean -x -f"
            echo "Build main project"
            sh """
              cd build
              mkdir -p build_ci_${params.PROJECT_NAME}
              make clean PROJECT="${params.PROJECT_NAME}" OUT_DIR_PFX=build_ci >> build_ci_${params.PROJECT_NAME}/${params.PROJECT_NAME}_build.log
              CPPFLAGS="-DCI_BUILD=1 -Dprot_BLEPRO_ENABLED=true" make PROJECT="${params.PROJECT_NAME}" OUT_DIR_PFX=build_ci >> build_ci_${params.PROJECT_NAME}/${params.PROJECT_NAME}_build.log
              make clean PROJECT="${params.PROJECT_NAME}" >> build_ci_${params.PROJECT_NAME}/${params.PROJECT_NAME}_build.log
              CPPFLAGS="-Dprot_BLEPRO_ENABLED=true" make PROJECT="${params.PROJECT_NAME}" >> build_ci_${params.PROJECT_NAME}/${params.PROJECT_NAME}_build.log
            """
            sh(returnStdout: true, script: '''#!/bin/bash
              if [ ! -z "$(git status --porcelain)" ]; then
                echo "Uncommitted changes in tracked files"
                echo "$(git status --porcelain)"
                exit 1
              fi
            '''.stripIndent())
            sh "git submodule status > submodules_status"
            archiveArtifacts allowEmptyArchive: false,
                             artifacts: """**build/build_ci_${params.BRANCH_NAME}_${params.PROJECT_NAME}/${params.BRANCH_NAME}_*.hex,
                                           **build/build_${params.BRANCH_NAME}_${params.PROJECT_NAME}/${params.BRANCH_NAME}_*.hex,
                                           **build/**/${params.PROJECT_NAME}_build.log,
                                           **app_slot0/${params.SLOT_0_BRANCH_NAME}/gcc_dual_bank/build_${params.SLOT_0_PROJECT_NAME}_app_slot0_*/${params.SLOT_0_PROJECT_NAME}*.elf,
                                           **app_slot0/${params.SLOT_0_BRANCH_NAME}/gcc_dual_bank/build_${params.SLOT_0_PROJECT_NAME}_app_slot0_*/${params.SLOT_0_PROJECT_NAME}*.map,
                                           **app_slot1/${params.SLOT_1_BRANCH_NAME}/gcc_dual_bank/build_${params.SLOT_1_PROJECT_NAME}_app_slot1_*/${params.SLOT_1_PROJECT_NAME}*.elf,
                                           **app_slot1/${params.SLOT_1_BRANCH_NAME}/gcc_dual_bank/build_${params.SLOT_1_PROJECT_NAME}_app_slot1_*/${params.SLOT_1_PROJECT_NAME}*.map,
                                           **bootloader/logi_mcuboot/gcc/build_logi_mcuboot_nrf52833_*/*.elf,
                                           **bootloader/logi_mcuboot/gcc/build_logi_mcuboot_nrf52833_*/*.map,
                                           **bootloader/logi_mcuboot/external/mcuboot/root-ec-p256.pem,
                                           **bootloader/logi_mcuboot/external/mcuboot/root-rsa-2048.pem,
                                           **bootloader/logi_mcuboot/external/mcuboot/root-rsa-3072.pem,
                                           **config/*/*.pem,
                                           **submodules_status""",
                             caseSensitive: true,
                             defaultExcludes: true,
                             fingerprint: false,
                             onlyIfSuccessful: false
            // Clean workspace at build end
            cleanWs()
        } // End of stage ('Build Job - Build')
    } // End of node ('builder' && 'dual_bank')

    node ('fw_check') {
      stage ('Firmwares Comparison Job - Checkout') {
        // TODO
        echo "TODO"
      }
      stage ('Firmwares Comparison Job - Build') {
        // TODO
        echo "TODO"
      }
    } // End of node ('slave')

    node (label: "${params.PROJECT_NAME} && ${params.BRANCH_NAME}") {
        stage ('Test Execution Job - Checkout') {
            checkout(
                [$class: 'GitSCM',
                    branches: [[name: "${params.PYTESTBOX_BRANCH_NAME}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: scm.extensions + [[$class: 'CleanCheckout'],
                        [$class: 'PruneStaleBranch'], pruneTags(true),
                        [$class: 'SubmoduleOption',
                        disableSubmodules: false,
                        parentCredentials: true,
                        recursiveSubmodules: true,
                        reference: '',
                        trackingSubmodules: false
                    ]],
                    submoduleCfg: [],
                    userRemoteConfigs: [
                     [credentialsId: 'GithubProductsCIToken',
                      url: "https://github.com/Logitech/py-test-box.git"]
                    ]
                ]
            )
        } // End of stage ('Test Execution Job - Checkout')

        stage ('Test Execution Job - Build') {
            copyArtifacts(
                filter: """**build/build_ci_${params.BRANCH_NAME}_${params.PROJECT_NAME}/${params.BRANCH_NAME}_*.hex,
                           **app_slot1/${params.SLOT_1_BRANCH_NAME}/gcc_dual_bank/build_${params.SLOT_1_PROJECT_NAME}_app_slot1_*/${params.SLOT_1_PROJECT_NAME}*.elf,
                           **bootloader/logi_mcuboot/gcc/build_logi_mcuboot_nrf52833_*/*.elf,
                           **bootloader/logi_mcuboot/external/mcuboot/root-ec-p256.pem,
                           **bootloader/logi_mcuboot/external/mcuboot/root-rsa-2048.pem,
                           **bootloader/logi_mcuboot/external/mcuboot/root-rsa-3072.pem,
                           **config/*/*.pem""",
                projectName: env.JOB_NAME,
                fingerprintArtifacts: true,
                selector: specific(env.BUILD_NUMBER),
                target: 'PYTESTBOX/TESTS/DFU_FILES',
                flatten: true
            )
            copyArtifacts(
                filter: """**config/*/*.pem""",
                projectName: env.JOB_NAME,
                fingerprintArtifacts: true,
                selector: specific(env.BUILD_NUMBER),
                target: 'PYTESTBOX/TESTS/DFU_FILES',
                flatten: false
            )
            copyArtifacts(
                filter: """**submodules_status""",
                projectName: env.JOB_NAME,
                fingerprintArtifacts: true,
                selector: specific(env.BUILD_NUMBER),
                target: 'PYTESTBOX/TESTS/LOCAL',
                flatten: true
            )

            try {
                // Delete .so files in /tmp that have been untouched for more than a day
                sh """
                  sudo find /tmp -name *.so -mtime +1 -user Jenkins -delete
                """
                // Shell Integration Test step - framework initialization
                sh """
                  python3 PYTESTBOX/LIBS/PYSETUP/pyEnvChecker.py
                """
                // Get Node Name
                def node_name = "${NODE_NAME}"
                clean_node_name = node_name.replaceAll("\\s","_")
                echo "The Node Name is: ${clean_node_name}"

                // Shell Integration Test step - Node Setup
                sh """
                  python3 PYTESTBOX/TESTS/main.py \
                      --file=PYTESTBOX/TESTS/SETTINGS/testFilter.txt \
                      --variant=RECEIVER/${params.SETUP_CONFIG} \
                      --product=PYTESTBOX \
                      --target=DEVICE \
                      --output=console,log,junit,jrl \
                      --level=CiScript \
                      --keep
                """
            }
            finally {
                try {
                    // Permission cleanup
                    sh "python3 PYTESTBOX/CICD/ciscripts/permissions_clean_up.py"
                }
                catch(all) {
                    echo 'Error cleaning up permissions'
                }
            }
            // Save Node Setup JUnit Results and check current build status
            junit "**/LOCAL/**/${params.SETUP_CONFIG}/**/*.xml"
            archiveArtifacts allowEmptyArchive: true, artifacts: """**/LOCAL/**/${params.SETUP_CONFIG}/**/log/*.log"""
            if (currentBuild.currentResult != 'SUCCESS') {sh "exit 1"}

            try {
                timeout(time: 60, unit: 'MINUTES', activity: true) {
                  // Shell Integration Test step - tests execution
                  sh """
                    python3 PYTESTBOX/TESTS/main.py  \
                        --file=PYTESTBOX/TESTS/SETTINGS/testFilter.txt \
                        --variant=PRODUCT/${params.TEST_CONFIG} \
                        --product=PYTESTBOX \
                        --target=DEVICE \
                        --output=console,log,junit,jrl \
                        --level=Interface,Business,Functionality,ErrorHandling,Robustness,Security,Time-consuming
                  """
                }
            }
            finally {
                try {
                    // Permission cleanup
                    sh "python3 PYTESTBOX/CICD/ciscripts/permissions_clean_up.py"
                }
                catch(all) {
                    echo 'Error cleaning up permissions'
                }
            }
            // Save JUnit Results
            junit "**/LOCAL/**/${params.TEST_CONFIG}/**/*.xml"
            archiveArtifacts allowEmptyArchive: true, artifacts: "**/LOCAL/**/${params.TEST_CONFIG}/**/log/*.log", caseSensitive: true, defaultExcludes: true, fingerprint: false, onlyIfSuccessful: false
        } // End of stage ('Test Execution Job - Build')
    } // End of node (label: "${params.PROJECT_NAME} && ${params.BRANCH_NAME}")
} // End of timestamps