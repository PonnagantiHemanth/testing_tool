; -----------------------------------------------------------------------------
; Python Test Harness
; -----------------------------------------------------------------------------
;
; [Summary] Yoko BLE Pro Build specific features
;
; [Author] Vinodh Selvaraj
;
; [DateTime]   2022/01/07
; -----------------------------------------------------------------------------

[PRODUCT]
ProductReference = 'RBK78'
ProductID = 'C548'
TransportID = ('B371', )
BluetoothPID = 'B371'
EQuadPID = 'B371'
NvsStartAddress = 0x7A000
NvsSize = 24576
NvsBankSize = 4096
IsMice = False

[PRODUCT/DEVICE]
MaxWaitSleep = 10
MaxWaitDeepSleep = 7200
KeyboardType = 'membrane'
NbHosts = 3

[PRODUCT/DEVICE/FN_LOCK]
PWS_UX_V1_2 = True

[PRODUCT/DEVICE/BATTERY]
MaximumVoltage = 4.2
NominalVoltage = 4.0
CutOffVoltage = 3.6

[PRODUCT/NVS_CHUNK_IDS]
Enabled = True
ChunkIdNames = ('NVS_X1E02_STATE_ID', 'NVS_DFU_ID', 'NVS_APP_SECUR_LVL_ID')
ChunkIdValues = ('0x026C', '0x0260', '0x264')

# USB communication
[PRODUCT/USB_COMMUNICATION]
SetIdleSupported = True

# Feature 0x0000 version 2
[PRODUCT/FEATURES/IMPORTANT/ROOT]
Version_1 = False
Version_2 = True

# Feature 0x0001 version 2
[PRODUCT/FEATURES/IMPORTANT/FEATURE_SET]
Version_1 = False
Version_2 = True
FeatureCountInBLE = 0x1F
BootloaderFeatureCountInBLE = 0x05

# Feature 0x0003 version 4
[PRODUCT/FEATURES/COMMON/DEVICE_INFORMATION]
Enabled = True
Version_4 = True
EntityCount = 3
UnitId = ('9CFD8841','92D5E93A',)
TransportUsb = False
TransportEQuad = False
BootLoaderTransportEQuad = False
TransportBTLE = True
TransportBT = False
ModelId = 'B37100000000'
ExtendedModelId = 0
CapabilitiesSerialNumber = True
FwType = ('01', '00', '05')
FwPrefix = ('BL1', 'RBK', '')
FwNumber = ('82', '78', '00')
Revision = ('00', '00', '00')
Build = ('0010', '0010', '0125')
TransportId = ('B371', 'B371', '0000')
BootLoaderTransportId = ('B371', '0000', '0000')
SerialNumber = ('000000000000000000000000',)

# Feature 0x0005 version 0
[PRODUCT/FEATURES/COMMON/DEVICE_TYPE_AND_NAME]
Enabled = True
MarketingName = 'Casa Keys'
DeviceType = 0

# Feature 0x0007 version 0
[PRODUCT/FEATURES/COMMON/DEVICE_FRIENDLY_NAME]
Enabled = True
Version_0 = True
NameMaxLength = 14

# Feature 0x0011 version 0
[PRODUCT/FEATURES/COMMON/PROPERTY_ACCESS]
Enabled = True
Version_0 = True
SwAccessibleProperties = ('EXTENDED_MODEL_ID', 'KEYBOARD_LAYOUT', 'SERIAL_NUMBER', 'HIDPP_DEVICE_NAME', 'SOFTWARE_EXTRA_INFORMATION')
SwAccessiblePropertiesSizes = ('HIDPP_DEVICE_NAME:50', 'SOFTWARE_EXTRA_INFORMATION:16')

# Feature 0x00C2
[PRODUCT/FEATURES/COMMON/DFU_CONTROL]
Enabled = False

# Feature 0x00C3 version 0
[PRODUCT/FEATURES/COMMON/SECURE_DFU_CONTROL]
Enabled = True
Version_0 = True
DfuControlTimeout = 30
DfuControlActionType = 1
DfuControlActionData = 0x000000

# Feature 0x00D0 version 3
[PRODUCT/FEATURES/COMMON/DFU]
Enabled = True
Version_3 = True
# D0A for B2C and D0B for B2B
MagicString = "RBK78_D0A"
UpgradableEntityTypes = ('0', '5')
ErrorLevel = 3
HexFileName = "yoko_ble_pro_prod.hex"
SoftDeviceDfuFileName = "yoko_ble_pro_s113_nrf52_limit.dfu"
FlashWriteVerify = False
VerifyCmd3DoneAfterCmd1And2 = False
VerifyFlag = False
# 114688 bytes ( APP Start = 112*1024 )
LowestApplicationAddress = 0x0001C000
# 397312 bytes ( APP Limit = Start + 276*1024)
HighestApplicationAddress = 0x00061000
# Soft Device is the first partition for YOKO hence 0 bytes.
LowestSoftDeviceAddress = 0x00001000
# 114688 bytes ( BLE Size = 112*1024 )
SoftDeviceSizeAddress = 0x0001C000
AdditionalAuthentication = True
EncryptCapabilities = ('3', '1')

# Feature 0x1004 version 3
[PRODUCT/FEATURES/COMMON/UNIFIED_BATTERY]
Enabled = True
Version_3 = True
SupportedLevels = ('100', '50', '30', '10')
CapabilitiesFlags = ('1', '1', '0', '0')
# charge&discharge Excel formula fitting: Doc Link to be Provided TBA
DischargeSOCmV = ('4130','4080','4020','4000','3950','3910','3890','3850','3820','3790','3770','3750','3730','3720','3700','3690','3670','3660','3640','3610','3570')
RechargeSOCmV = ('4130','4080','4020','4000','3950','3910','3890','3850','3820','3790','3770','3750','3730','3720','3700','3690','3670','3660','3640','3610','3570')
StateOfChargeStep = 5

# Feature 0x1802 version 0
[PRODUCT/FEATURES/COMMON/DEVICE_RESET]
Enabled = True

# Feature 0x1803 version 0
[PRODUCT/FEATURES/COMMON/GPIO_ACCESS]
Enabled = True
Version_0 = True
NumberOfPorts = 2
GpioInputMask       = ('0177E608', '00000009', )
GpioInputValue      = ('0177E600', '00000009', )
GpioOutputMask      = ('FE8819F7', '000003FA', )
GpioOutputValue     = ('FC0019F3', '00000008', )
GpioUnusedMask      = ('04000000', '00000000', )
GpioForbiddenMask   = ('00000000', '00000000', )

# Feature 0x1805 version 0
[PRODUCT/FEATURES/COMMON/OOB_STATE]
Enabled = True
Version_0 = True

# Feature 0x1807 version 0
# https://docs.google.com/spreadsheets/d/1QF6OP04KMh1ycOAdKl4gSFNjfPGVOBFxNpoMEVntXUk/edit?usp=sharing
[PRODUCT/FEATURES/COMMON/CONFIGURABLE_PROPERTIES]
Enabled = True
Version_0 = True
SupportedProperties = ('EXTENDED_MODEL_ID', 'KEYBOARD_LAYOUT', 'BLE_GAP_ADV_OUTPUT_POWER', 'SERIAL_NUMBER', 'HIDPP_DEVICE_NAME', 'BLE_GAP_APP_NAME', 'BLE_GAP_BL_ADV_NAME_SIZE', 'BLE_GAP_APP_ADV_NAME_SIZE', 'BLE_GAP_BL_SR_NAME_SIZE', 'BLE_GAP_APP_SR_NAME_SIZE', 'BLE_DIS_VID', 'BLE_DIS_BL_PID', 'BLE_DIS_APP_PID', 'BLE_DIS_MANUFACTURER_NAME', 'BLE_DIS_BL_MODEL_NUMBER', 'BLE_DIS_APP_MODEL_NUMBER', 'SOFTWARE_EXTRA_INFORMATION')
SpecificPropertiesSizes = ('HIDPP_DEVICE_NAME:50', 'BLE_GAP_APP_NAME:14', 'BLE_DIS_MANUFACTURER_NAME:32', 'BLE_DIS_BL_MODEL_NUMBER:32', 'BLE_DIS_APP_MODEL_NUMBER:32', 'SOFTWARE_EXTRA_INFORMATION:16')

# Feature 0x1814 version 1
[PRODUCT/FEATURES/COMMON/CHANGE_HOST]
Enabled = True
Version_1 = True

# Feature 0x1815 version 2
[PRODUCT/FEATURES/COMMON/HOSTS_INFO]
Enabled = True
Version_2 = True
SupportSetOSVersion = True
SupportSetName = True
SupportGetName = True
SupportBLEDescriptor = True
HostNameMaxLength = 24
HostBusType = 5

# Feature 0x1816 version 0
[PRODUCT/FEATURES/COMMON/BLE_PRO_PREPAIRING]
Enabled=True
Version_0 = True
KeysSupported = 0x67

# Feature 0x1830 version 0
[PRODUCT/FEATURES/COMMON/POWER_MODES]
Enabled = True
Version_0 = True
TotalNumber = 4
NumberList = '0 1 2 3'
CurrentThresholdDeepSleep = 100
CurrentThresholdDeadMode = 100

# Feature 0x1861 version 0
[PRODUCT/FEATURES/COMMON/BATTERY_LEVELS_CALIBRATION]
Enabled = True
Version_1 = True
RequiredCalibrationPointNb = 2
RequiredCalibrationPoints = ('0E11', '1068')
AdcCoefficient = 0.23621256

# TODO - Feature 0x1891 version 6 to be implemented in the test framework

# TODO - Feature 0x18A1 version 0 to be implemented in the test framework

# Feature 0x18B0 version 1
[PRODUCT/FEATURES/COMMON/STATIC_MONITOR_MODE]
Enabled = True
Version_1 = True
KeyboardWithLargerMatrixMode = True
EnhancedKeyboardWithLargerMatrixMode = True

# Feature 0x1B04 version 5
[PRODUCT/FEATURES/COMMON/SPECIAL_KEYS_MSE_BUTTONS]
Enabled = True
Version_5 = True
CidCount = 16
# TODO: Verify this list - queue is empty when sending this
CidListWithoutGhostKey = ('010A', '011C', '00E5', '00E7', '00E8')

# Feature 0x1B04 version 5
[PRODUCT/FEATURES/COMMON/SPECIAL_KEYS_MSE_BUTTONS/CID_INFO_TABLE]
# https://docs.google.com/spreadsheets/d/1RF21x_44W2mq4HU1WYdJILey82r4oeq-edbm-HyYZ5M/edit#gid=306101907
Enabled = True
FriendlyName                      = ('Host 1'               , 'Host 2'               , 'Host 3'               , 'Emoji Panel'            , 'Dictation'               , 'Print Screen2'        , 'Prev Track'           , 'Play Pause'           , 'Next Track'           , 'Mute'                 , 'Volume Down'          , 'Volume Up'            , 'Mute Microphone'      , 'Delete'               , 'Fn Lock'              , 'Fn Key'               ,)
Cid                               = ('0xD1'                 , '0xD2'                 , '0xD3'                 , '0x108'                  , '0x103'                   , '0x10A'                , '0xE4'                 , '0xE5'                 , '0xE6'                 , '0xE7'                 , '0xE8'                 , '0xE9'                 , '0x11C'                , '0x117'                , '0xDE'                 , '0x34'                 ,)
Task                              = ('0xAE'                 , '0xAF'                 , '0xB0'                 , '0xDD'                   , '0xD8'                    , '0xDF'                 , '0x06'                 , '0x04'                 , '0x05'                 , '0x03'                 , '0x02'                 , '0x01'                 , '0xF1'                 , '0x62'                 , '0x62'                 , '0x62'                 ,)
FlagVirtual                       = ('False'                , 'False'                , 'False'                , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
FlagPersist                       = ('False'                , 'False'                , 'False'                , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
FlagDivert                        = ('False'                , 'False'                , 'False'                , 'True'                   , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'False'                , 'False'                ,)
FlagReprog                        = ('False'                , 'False'                , 'False'                , 'True'                   , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'False'                , 'False'                ,)
FlagFnTog                         = ('True'                 , 'True'                 , 'True'                 , 'True'                   , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'False'                , 'False'                , 'False'                , 'False'                ,)
FlagHotKey                        = ('False'                , 'False'                , 'False'                , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'True'                 , 'True'                 , 'False'                , 'True'                 ,)
FlagFKey                          = ('True'                 , 'True'                 , 'True'                 , 'True'                   , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'False'                , 'False'                , 'True'                 , 'False'                ,)
FlagMouse                         = ('False'                , 'False'                , 'False'                , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
Pos                               = ('0x01'                 , '0x02'                 , '0x03'                 , '0x04'                   , '0x05'                    , '0x06'                 , '0x07'                 , '0x08'                 , '0x09'                 , '0x0A'                 , '0x0B'                 , '0x0C'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 ,)
Group                             = ('0x00'                 , '0x00'                 , '0x00'                 , '0x00'                   , '0x00'                    , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 ,)
GMask                             = ('0x00'                 , '0x00'                 , '0x00'                 , '0x00'                   , '0x00'                    , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 ,)
AdditionalFlagsRawWheel           = ('False'                , 'False'                , 'False'                , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
AdditionalFlagsAnalyticsKeyEvents = ('True'                 , 'True'                 , 'True'                 , 'True'                   , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 ,)
AdditionalFlagsForceRawXY         = ('False'                , 'False'                , 'False'                , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
AdditionalFlagsRawXY              = ('False'                , 'False'                , 'False'                , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)

# Feature 0x1D4B version 0
[PRODUCT/FEATURES/COMMON/WIRELESS_DEVICE_STATUS]
Enabled = True

# Feature 0x1DF3
[PRODUCT/FEATURES/COMMON/EQUAD_DJ_DEBUG_INFO]
Enabled = False

# Feature 0x1E00 version 0 (Enabled in PRODUCT.settings.ini)
[PRODUCT/FEATURES/COMMON/ENABLE_HIDDEN]
Enabled = True

# Feature 0x1E02
[PRODUCT/FEATURES/COMMON/MANAGE_DEACTIVATABLE_FEATURES_AUTH]
Enabled = True
Version_0 = True
SupportManufacturing = True
SupportCompliance = True
SupportGotthard = True
PersistentActivationManufacturing = False
PersistentActivationCompliance = False
PersistentActivationGotthard = True
AuthFeature = 0x1602

# Feature 0x1EB0 version 0
[PRODUCT/FEATURES/COMMON/TDE_ACCESS_TO_NVM]
Enabled = True
Version_0 = True
TdeMaxSize = 0x20

# Feature 0x40A3 version 0
[PRODUCT/FEATURES/KEYBOARD/FN_INVERSION_FOR_MULTI_HOST_DEVICES]
Enabled = True
Version_0 = True
FnInversionDefaultState = 1
HasFnLock = True

# Feature 0x4220 version 0
[PRODUCT/FEATURES/KEYBOARD/LOCK_KEY_STATE]
Enabled = True
Version_0 = True

# Feature 0x4521 version 0
[PRODUCT/FEATURES/KEYBOARD/DISABLE_KEYS]
Enabled = True
Version_0 = True
CapsLock = True
Windows = True
Insert = True
DefaultDisabledKeys = 0

# Feature 0x4531 version 1
[PRODUCT/FEATURES/KEYBOARD/MULTI_PLATFORM]
Enabled = True
Version_1 = True
# platform descriptor
OsMask = ('1', '32', '64', '8')
# platform info
OsDetection = True
SetHostPlatform = True

# Feature 0x4540 version 0
[PRODUCT/FEATURES/KEYBOARD/KEYBOARD_INTERNATIONAL_LAYOUTS]
Enabled = True
KeyboardLayout = 0

# BLE PRO Features
[SHARED/DEVICES]
# List devices for each device dependant property
NumberOfDevices = 1
Type = ('1',)
Name = ('Casa Keys',)
BluetoothPID = ('B371',)
UnitIds_1 = ('9CFD8841','92D5E93A',)
BLEProServiceVersion = ('01',)
ExtendedModelId = ('0',)
PrePairingAuthMethod = ('0',)
PasskeyAuthMethod = ('1',)
Passkey2ButtonsAuthMethod = ('0',)
AuthEntropy = ('20',)
RootFeatureVersion = ('2',)

[SHARED/DISCOVERY]
Enabled = True

[SHARED/PAIRING]
Enabled=True
BLEDevicePairing = True
PasskeyAuthenticationMethod = True
BLEProOsDetection = True

[PRODUCT/DEVICE/CONNECTION_SCHEME]
MultipleChannels = True
MultipleEasySwitchButtons = True

[PRODUCT/DEVICE/CONNECTION_SCHEME/BLE_PRO_CS]
Enabled = True
Version_0 = True
SafePrePairedReceiver = True

[RECEIVER/ENUMERATION]
Number_Of_Pairing_Slots = 6

[PRODUCT/DEVICE/CONNECTION_SCHEME/DEVICE_RECOVERY]
Enabled = True
RecoveryKeysVariant = "kdb-recovery-keys-make_reset_kdb-recovery-keys-break"

[RECEIVER/TDE]
Enabled = False
Prepairing = False
Non_Volatile_Memory_Access_Size = 16
IRK = True
CSRK = False

[PRODUCT/HID_REPORT]
HidGuidelinesVersion = 2.1
HidKeyboardType = 'HidKeyboard'

[RUNTIME/DEBUGGERS]
Targets = ("Device"                      , )
Types   = ("Hadron3Zones24KJlinkDebugger", )

# Bug tracker SubSystem
[BUG_TRACKER]
Bug_AnalyticsKeyEvents_CID_Packing = True