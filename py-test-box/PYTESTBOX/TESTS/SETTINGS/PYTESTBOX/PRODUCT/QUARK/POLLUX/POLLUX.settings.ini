; -----------------------------------------------------------------------------
; Python Test Harness
; -----------------------------------------------------------------------------
;
; [Summary]  POLLUX PLATFORM specific features
;
; [Author] Christophe Roquebert
;
; [DateTime]   2022/08/30
; -----------------------------------------------------------------------------

[PRODUCT]
ProductReference = 'RBO03'
# USB_PID_MEZZY_BLE_PRO: 0xC548
# USB_PID_BOOT_MEZZY_BLE_PRO: 0xAB07
ProductID = 'C548 AB07'
# BT_PID_QUARK
TransportID = ('B34E',)
BluetoothPID = 'B34E'
EQuadPID = 'B34E'
NvsStartAddress = 0x7E000
IsMice = False

[PRODUCT/DEBOUNCE]
# https://eapps.logitech.com/Equinox/TestItem_Show.aspx?ProjectId=920&ProcedureId=13&TestItemId=15116&ActiveTab=Result%20Template
Enabled = True
Version_1 = True
0PercentMakeDebounceUs = 3100
100PercentMakeDebounceUs = 8100
MakeBlindWindowUs = 20000
0PercentBreakDebounceUs = 24000
100PercentBreakDebounceUs = 28200
BreakBlindWindowUs = 20000
100PercentMakeDeepSleepUs = 23000

[PRODUCT/DEVICE]
MaxWaitSleep = 10
MaxWaitDeepSleep = 7200
KeyboardType = 'mechanical'
NbHosts = 3

[PRODUCT/DEVICE/BATTERY]
MaximumVoltage = 4.2
NominalVoltage = 4.0
CutOffVoltage = 3.52

[PRODUCT/DEVICE/CONNECTION_SCHEME]
MultipleChannels = True
MultipleEasySwitchButtons = True

[PRODUCT/DEVICE/CONNECTION_SCHEME/BLE_PRO_CS]
Enabled = True
Version_0 = True
SafePrePairedReceiver = True
BLEServiceChangeSupport = True
ConnectivityLEDsCheck = False

# BLE PRO Features
[PRODUCT/DEVICE/CONNECTION_SCHEME/DEVICE_RECOVERY]
Enabled = True
RecoveryKeysVariant = "kdb-recovery-keys-make_reset_kdb-recovery-keys-break"

[PRODUCT/DEVICE/FN_LOCK]
PWS_UX_V1_2 = True

[PRODUCT/HID_REPORT]
HidGuidelinesVersion = 2.7
HidOptions = ('katahira',)
HidKeyboardType = 'HidKeyboard'
ProductSpecificUsages = ('BRIGHTNESS_DOWN', 'BRIGHTNESS_UP', 'VOICE_DICTATION', 'EMOJI_PICKER', 'START_OR_STOP_MICROPHONE_CAPTURE', 'SCAN_PREVIOUS_TRACK', 'PLAY_PAUSE','SCAN_NEXT_TRACK', 'MUTE', 'MENU', 'AL_CALCULATOR', 'AC_VIEW_TOGGLE', 'POWER', 'AC_SEARCH', 'VOLUME_DOWN', 'VOLUME_UP',)
TopRowUsagesCount = 0x0C

[PRODUCT/NVS_CHUNK_IDS]
Enabled = True
IsGamingVariant = True
ChunkIdNames = ('NVS_LEDBKLT_ID', )
ChunkIdValues = ('0x0009', )

[PRODUCT/NVS_UICR]
MagicNumber = True

[PRODUCT/PROTOCOLS/BLE]
Enabled = True
OsDetection = True
ChromeSupport = True
HidReportMap = "HidReportMap"
Software_Revision = ('00590A0126',)
BAS_Version = "1.0"

[PRODUCT/PROTOCOLS/BLE_PRO]
Enabled = True
Version_1 = False
Version_2 = True

[PRODUCT/PROTOCOLS/BLE/ADVERTISING]
# Undirected Advertising Data = '0201050319C2030503121872FD0A084D5820416E7957686506FF0600030080'
# Scan Response = '0F094D5820416E7957686572652033420B1672FD1001012DB0020200020A04'
SwiftPairCapability = True
TxPower = 0x04
AuthenticationType = 0x01
DeviceType = 0x01
BootloaderReconnectionAdvertisingCompleteWindowS = 40
BootloaderReconnectionAdvertisingFirstHdcSubWindowS = 5
BootloaderReconnectionAdvertisingHdcSubWindowS = 1.28
BootloaderReconnectionAdvertisingLcdSubWindowS = 15
BootloaderReconnectionAdvertisingLcdIntervalMs = 20
BootloaderRecoveryAdvertisingCompleteWindowS = 40

[PRODUCT/TIMINGS]
Enabled = True
StartupTime = 15

# USB communication
[PRODUCT/USB_COMMUNICATION]
SetIdleSupported = True

# Feature 0x0000 version 2
[PRODUCT/FEATURES/IMPORTANT/ROOT]
Version_1 = False
Version_2 = True

# Feature 0x0001 version 2
[PRODUCT/FEATURES/IMPORTANT/FEATURE_SET]
Version_1 = False
Version_2 = True
# TODO - Check for each stage
FeatureCountInBLE = 0x1F
BootloaderFeatureCountInBLE = 0x05

# Feature 0x0003 version 7
[PRODUCT/FEATURES/COMMON/DEVICE_INFORMATION]
Enabled = True
Version_7 = True
EntityCount = 4
UnitId = ('A7FB5E2E', '74D49D5A', 'C48C7C34', 'EB4D9B30', '23D2B3B2', )
TransportUsb = False
TransportEQuad = False
BootLoaderTransportEQuad = False
TransportBTLE = True
TransportBT = False
ModelId = 'B34E00000000'
ExtendedModelId = 0
FwType = ('01', '00', '05', '02')
FwPrefix = ('BOT', 'RBO', '', 'HW')
FwNumber = ('40', '03', '00', '00')
Revision = ('00', '00', '00', '00')
Build = ('0000', '0000', '0126', '0000')
TransportId = ('B34E', 'B34E', '0000', '0000')
BootLoaderTransportId = ('B34E', '0000', '0000', '0000')
CapabilitiesSerialNumber = True

# Feature 0x0005 version 5
[PRODUCT/FEATURES/COMMON/DEVICE_TYPE_AND_NAME]
Enabled = True
Version_5 = True
MarketingName = 'Development Platform Pollux'
DeviceType = 0

# Feature 0x0007 version 0
[PRODUCT/FEATURES/COMMON/DEVICE_FRIENDLY_NAME]
Enabled = True
Version_0 = True
NameMaxLength = 14

# Feature 0x0011 version 0
[PRODUCT/FEATURES/COMMON/PROPERTY_ACCESS]
Enabled = True
Version_0 = True
SwAccessibleProperties = ('EXTENDED_MODEL_ID', 'KEYBOARD_LAYOUT', 'SERIAL_NUMBER', 'HIDPP_DEVICE_NAME', 'SOFTWARE_EXTRA_INFORMATION', 'BLE_GAP_APP_NAME', 'BLE_DIS_APP_PID', 'HW_VERSION')
SwAccessiblePropertiesSizes = ('HIDPP_DEVICE_NAME:50', 'SOFTWARE_EXTRA_INFORMATION:16', 'BLE_GAP_APP_NAME:14')

# Feature 0x0020 version 0 (Enabled in QUARK.settings.ini)

# Feature 0x0021 version 1
[PRODUCT/FEATURES/COMMON/UNIQUE_IDENTIFIER_32_BYTES]
Enabled = False
Version_1 = True

# Feature 0x00C2
[PRODUCT/FEATURES/COMMON/DFU_CONTROL]
Enabled = False

# Feature 0x00C3 version 1
[PRODUCT/FEATURES/COMMON/SECURE_DFU_CONTROL]
Enabled = True
Version_1 = True
DfuControlTimeout = 30
DfuControlActionType = 1
DfuControlActionData = 0x000000

# Feature 0x00D0 version 3
[PRODUCT/FEATURES/COMMON/DFU]
Enabled = True
Version_3 = True
MagicString = "RBO03_D0A"
UpgradableEntityTypes = ('0', '5')
ErrorLevel = 3
FlashWriteVerify = False
VerifyCmd3DoneAfterCmd1And2 = False
VerifyFlag = False
LowestApplicationAddress = 0x00019000
HighestApplicationAddress = 0x0006D000
HexFileName = "pollux_prod.hex"
SoftDeviceDfuFileName = "pollux_s112_nrf52810_limit.dfu"
AdditionalAuthentication = True
EncryptCapabilities = ('3',)

# Feature 0x1004 version 5
[PRODUCT/FEATURES/COMMON/UNIFIED_BATTERY]
# TODO - Enable version 5 when available: cf https://jira.logitech.io/browse/NRF52-116
Enabled = True
Version_5 = True
SupportedLevels = ('100', '50', '30', '10')
CapabilitiesFlags = ('1', '1', '0', '0')
DischargeSOCmV = ('4200', '4090', '4040', '4000', '3960', '3930', '3900', '3860', '3830', '3810', '3790', '3770', '3760', '3750', '3740', '3730', '3710', '3700', '3670', '3650', '3520')
RechargeSOCmV = ('4200', '4200', '4200', '4150', '4120', '4080', '4050', '4020', '4000', '3970', '3960', '3940', '3920', '3910', '3890', '3880', '3870', '3850', '3820', '3780', '3520')
StateOfChargeStep = 5
BatterySourceIndex = 0

# Feature 0x1602 version 0
[PRODUCT/FEATURES/COMMON/PASSWORD_AUTHENTICATION]
Enabled = True
Version_0 = True
# Flags - Long password = 0 ; Full authentication = 0 ; Constant credentials = 1
ConstantCredentials = True
FullAuthentication = False
SupportLongPassword = False

# Feature 0x1802 version 0
[PRODUCT/FEATURES/COMMON/DEVICE_RESET]
Enabled = True

# Feature 0x1803 version 1
[PRODUCT/FEATURES/COMMON/GPIO_ACCESS]
Enabled = True
Version_1 = True
NumberOfPorts = 1
GpioInputMask       = ('3E603FFF',)
GpioInputValue      = ('0E203FFF',)
GpioOutputMask      = ('C18FC000',)
GpioOutputValue     = ('00870000',)
GpioUnusedMask      = ('00000000',)
GpioForbiddenMask   = ('00000000',)

# Feature 0x1805 version 0
[PRODUCT/FEATURES/COMMON/OOB_STATE]
#TODO - Revert when hotfix branch merged
Enabled = False
Version_0 = True

# Feature 0x1807 version 4
[PRODUCT/FEATURES/COMMON/CONFIGURABLE_PROPERTIES]
Enabled = True
Version_4 = True
SupportedProperties = ('EXTENDED_MODEL_ID', 'KEYBOARD_LAYOUT', 'BLE_GAP_ADV_OUTPUT_POWER', 'SERIAL_NUMBER', 'HIDPP_DEVICE_NAME', 'USB_VID', 'BLE_GAP_APP_NAME', 'BLE_GAP_BL_ADV_NAME_SIZE', 'BLE_GAP_APP_ADV_NAME_SIZE', 'BLE_GAP_BL_SR_NAME_SIZE', 'BLE_GAP_APP_SR_NAME_SIZE', 'BLE_DIS_BL_PID', 'BLE_DIS_APP_PID', 'BLE_DIS_MANUFACTURER_NAME', 'BLE_DIS_BL_MODEL_NUMBER', 'BLE_DIS_APP_MODEL_NUMBER', 'SOFTWARE_EXTRA_INFORMATION', 'DISABLE_EASY_PAIRING', 'HW_VERSION')
SpecificPropertiesSizes = ('HIDPP_DEVICE_NAME:50', 'BLE_GAP_APP_NAME:14', 'BLE_DIS_MANUFACTURER_NAME:32', 'BLE_DIS_BL_MODEL_NUMBER:32', 'BLE_DIS_APP_MODEL_NUMBER:32', 'SOFTWARE_EXTRA_INFORMATION:16')

# Feature 0x1814 version 1
[PRODUCT/FEATURES/COMMON/CHANGE_HOST]
Enabled = True
Version_1 = True

# Feature 0x1815 version 2
[PRODUCT/FEATURES/COMMON/HOSTS_INFO]
Enabled = True
Version_2 = True
SupportSetOSVersion = True
SupportSetName = True
SupportGetName = True
SupportBLEDescriptor = True
HostNameMaxLength = 24

# Feature 0x1816 version 0
[PRODUCT/FEATURES/COMMON/BLE_PRO_PREPAIRING]
Enabled = True
Version_0 = True
KeysSupported = 0x67

# Feature 0x1830 version 0
[PRODUCT/FEATURES/COMMON/POWER_MODES]
Enabled = True
Version_0 = True
TotalNumber = 4
NumberList = '0 1 2 3'
CurrentThresholdDeepSleep = 155

# Feature 0x1861 version 1
[PRODUCT/FEATURES/COMMON/BATTERY_LEVELS_CALIBRATION]
# TODO - Enable when available: cf https://jira.logitech.io/browse/NRF52-31
Enabled = False
Version_1 = True
RequiredCalibrationPointNb = 2
RequiredCalibrationPoints = ('0DC5', '1068')
AdcCoefficient = 0.23621256

# Feature 0x1891 version 9
# TODO

# Feature 0x18B0 version 1
[PRODUCT/FEATURES/COMMON/STATIC_MONITOR_MODE]
Enabled = True
Version_1 = True
KeyboardMode = True
EnhancedKeyboardMode = True
KeyboardWithLargerMatrixMode = True
EnhancedKeyboardWithLargerMatrixMode = True

# Feature 0x1982 version 2
[PRODUCT/FEATURES/COMMON/BACKLIGHT]
# TODO - Enable when available: cf https://jira.logitech.io/browse/NRF52-38
Enabled = False
Version_2 = True
BacklightEffect = '00'
BacklightEffectList = '7F00'
BacklightStatus = '02'
NumberOfLevel = '08'
# SupportedOptions: Wow & PwrSave
SupportedOptions = '0505'

# Feature 0x1B04 version 6
[PRODUCT/FEATURES/COMMON/SPECIAL_KEYS_MSE_BUTTONS]
Enabled = True
Version_6 = True
CidCount = 39
CidListWithoutGhostKey = ('00C7', '00C8', '00E2', '00E3', '0103', '0108')

[PRODUCT/FEATURES/COMMON/SPECIAL_KEYS_MSE_BUTTONS/CID_INFO_TABLE]
Enabled = True
FriendlyName                      = ('Brightness Down'         , 'Brightness Up'           , 'Backlight Down'         , 'Backlight Up'            , 'Dictation'            , 'Emoji Panel'          , 'Screen Capture'       , 'Mute Microphone'      , 'Prev Track'           , 'Play Pause'           , 'Next Track'           , 'Mute'                 , 'Volume Down'          , 'Volume Up'               , 'Grave Accent'         , 'Tab'                  , 'Capslock'             , 'Left Shift'           , 'Left Ctrl'            , 'Left GUI'             , 'Left CMD Alt'         , 'Right CMD Alt'        , 'Right GUI'            , 'Right Ctrl'           , 'Right Shift'          , 'Back Slash'           , 'Insert'               , 'Delete'               , 'Home'                 , 'End'                  , 'Page Up'              , 'Page Down'            , 'Calculator'           , 'Show Desktop'         , 'Multi Platform Search', 'Lock Screen'          , 'Host 1'               , 'Host 2'               , 'Host 3'               ,)
Cid                               = ('0xC7'                    , '0xC8'                    , '0xE2'                   , '0xE3'                    , '0x103'                , '0x108'                , '0x10A'                , '0x11C'                , '0xE4'                 , '0xE5'                 , '0xE6'                 , '0xE7'                 , '0xE8'                 , '0xE9'                    , '0x10B'                , '0x10C'                , '0x10D'                , '0x10E'                , '0x10F'                , '0x110'                , '0x111'                , '0x112'                , '0x113'                , '0x114'                , '0x115'                , '0x11E'                , '0x116'                , '0x117'                , '0x118'                , '0x119'                , '0x11A'                , '0x11B'                , '0x0A'                 , '0x6E'                 , '0xD4'                 , '0x6F'                 , '0xD1'                 , '0xD2'                 , '0xD3'                 ,)
Task                              = ('0xA3'                    , '0xA4'                    , '0xC1'                   , '0xC2'                    , '0xD8'                 , '0xDD'                 , '0xDF'                 , '0xF1'                 , '0x06'                 , '0x04'                 , '0x05'                 , '0x03'                 , '0x02'                 , '0x01'                    , '0xE0'                 , '0xE1'                 , '0xE2'                 , '0xE3'                 , '0xE4'                 , '0xE5'                 , '0xE6'                 , '0xE7'                 , '0xE8'                 , '0xE9'                 , '0xEA'                 , '0xF3'                 , '0xEB'                 , '0xEC'                 , '0xED'                 , '0xEE'                 , '0xEF'                 , '0xF0'                 , '0x0A'                 , '0x43'                 , '0xB1'                 , '0x44'                 , '0xAE'                 , '0xAF'                 , '0xB0'                 ,)
FlagVirtual                       = ('False'                   , 'False'                   , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
FlagPersist                       = ('False'                   , 'False'                   , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
FlagDivert                        = ('True'                    , 'True'                    , 'True'                   , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'False'                , 'False'                , 'False'                ,)
FlagReprog                        = ('True'                    , 'True'                    , 'True'                   , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'False'                , 'False'                , 'False'                ,)
FlagFnTog                         = ('True'                    , 'True'                    , 'True'                   , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'False'                , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
FlagHotKey                        = ('False'                   , 'False'                   , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'True'                 , 'True'                    , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 ,)
FlagFKey                          = ('True'                    , 'True'                    , 'True'                   , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'False'                , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
FlagMouse                         = ('False'                   , 'False'                   , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
Pos                               = ('0x01'                    , '0x02'                    , '0x03'                   , '0x04'                    , '0x05'                 , '0x06'                 , '0x07'                 , '0x08'                 , '0x09'                 , '0x0A'                 , '0x0B'                 , '0x0C'                 , '0x00'                 , '0x00'                    , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 ,)
Group                             = ('0x00'                    , '0x00'                    , '0x00'                   , '0x00'                    , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                    , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 ,)
GMask                             = ('0x00'                    , '0x00'                    , '0x00'                   , '0x00'                    , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                    , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 , '0x00'                 ,)
AdditionalFlagsRawWheel           = ('False'                   , 'False'                   , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
AdditionalFlagsAnalyticsKeyEvents = ('True'                    , 'True'                    , 'True'                   , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                    , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 , 'True'                 ,)
AdditionalFlagsForceRawXY         = ('False'                   , 'False'                   , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)
AdditionalFlagsRawXY              = ('False'                   , 'False'                   , 'False'                  , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                   , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                , 'False'                ,)

# Feature 0x1D4B version 0
[PRODUCT/FEATURES/COMMON/WIRELESS_DEVICE_STATUS]
Enabled = True

# Feature 0x1E00 version 0 (Enabled in PRODUCT.settings.ini)

# Feature 0x1E02 version 0
[PRODUCT/FEATURES/COMMON/MANAGE_DEACTIVATABLE_FEATURES_AUTH]
Enabled = True
Version_0 = True
SupportManufacturing = True
SupportCompliance = True
SupportGotthard = True
PersistentActivationManufacturing = False
PersistentActivationCompliance = False
PersistentActivationGotthard = True
AuthFeature = 0x1602

# Feature 0x1E22 version 0
[PRODUCT/FEATURES/COMMON/SPI_DIRECT_ACCESS]
# TODO - Check with Dhananjay
Enabled = False
Version_0 = True

# Feature 0x1EB0 version 0
[PRODUCT/FEATURES/COMMON/TDE_ACCESS_TO_NVM]
Enabled = True
Version_0 = True
TdeMaxSize = 0x20

# Feature 0x1A20 version 0
# TODO

# Feature 0x1E80 version 0
# TODO

# Feature 0x1DF3 version 0
# TODO

# Feature 0x40A3 version 0
[PRODUCT/FEATURES/KEYBOARD/FN_INVERSION_FOR_MULTI_HOST_DEVICES]
Enabled = True
Version_0 = True
FnInversionDefaultState = 1
HasFnLock = True

# Feature 0x4220 version 0
[PRODUCT/FEATURES/KEYBOARD/LOCK_KEY_STATE]
Enabled = True
Version_0 = True

# Feature 0x4521 version 0
# TODO

# Feature 0x4531 version 1
[PRODUCT/FEATURES/KEYBOARD/MULTI_PLATFORM]
Enabled = True
Version_1 = True
# platform descriptor
OsMask = ('21', '32', '64', '8')
PlatformSource = ('0', '0', '0')
PlatformIndex = ('0', '255', '255')
AutoPlatform = ('255', '255', '255')
AutoDescriptor = ('255', '255', '255')
# platform info
OsDetection = True
SetHostPlatform = True

# Feature 0x4540 version 1
[PRODUCT/FEATURES/KEYBOARD/KEYBOARD_INTERNATIONAL_LAYOUTS]
Enabled = True
Version_1 = True
KeyboardLayout = 0

[RECEIVER/ENUMERATION]
Number_Of_Pairing_Slots = 06

[RECEIVER/TDE]
Enabled = False
Prepairing = False
Non_Volatile_Memory_Access_Size = 16
IRK = True
CSRK = False

[SHARED/DEVICES]
# List devices for each device dependent property
Type = ('1',)
Name = ('Pollux',)
UnitIds_1 = ('A7FB5E2E', '74D49D5A', 'C48C7C34', 'EB4D9B30', '23D2B3B2', )
BLEProServiceVersion = ('01',)
ExtendedModelId = ('0',)
PrePairingAuthMethod = ('1',)
PasskeyAuthMethod = ('1',)
Passkey2ButtonsAuthMethod = ('0',)
AuthEntropy = ('20',)
RootFeatureVersion = ('2',)

[SHARED/DISCOVERY]
Enabled = True

[SHARED/PAIRING]
Enabled = True
BLEDevicePairing = True
PasskeyAuthenticationMethod = True
BLEProOsDetection = True
BLELatencyRemoval = True

[RUNTIME]
UsbContextClass = "pytransport.usb.logiusbcontext.logiusbcontext.LogiusbUsbContext"

[RUNTIME/DEBUGGERS]
Targets = ("Device"             , )
Types   = ("QuarkJlinkDebugger" , )

# Bug tracker SubSystem
[BUG_TRACKER]
Bug_AnalyticsKeyEvents_CID_Packing = True
Bug_Backlight_EventGenerationForEnterOrExitCriticalBattery = True
Bug_BLE_GAP_Appearance_Bootloader = True
Bug_ChromeOS_Backlight_KeyCode = True
Bug_BLE_Unsupported_Report_Map = True
Bug_Erasing_Leading_Zero = True
Bug_SoftDeviceOverflowOnPropertyChange = True