// -------------------------------------
// Pipeline Configuration Section
properties([
    parameters([
        string(name: 'PROJECT_NAME', defaultValue: 'quark', description: 'firmware hex file name', ),
        string(name: 'BRANCH_NAME', defaultValue: 'quark', description: 'project branch name on goldenpass', ),
        string(name: 'SOC_NAME', defaultValue: 'QUARK256', description: 'System on a Chip definition', ),
    ]),
// End of Pipeline Configuration Section
// -------------------------------------
    pipelineTriggers([
        // Trigger on every update on master
        gerrit(
            serverName: 'goldenpass',
            gerritProjects: [[
                compareType: 'PLAIN',
                pattern: "ccp_fw/${params.BRANCH_NAME}",
                branches: [[ compareType: 'PLAIN', pattern: 'blaranjosantos/cmake' ]],
                disableStrictForbiddenFileVerification: false
            ]],
            triggerOnEvents: [
                patchsetCreated(excludeDrafts: true, excludeNoCodeChange: true)
            ]
        )
    ]),
])

timestamps {

    node ('builder_cmake') {

        stage ('Build Job - Checkout') {
            if (env.GERRIT_CHANGE_SUBJECT && env.GERRIT_CHANGE_OWNER_NAME) {
                echo "ChangeLog: ${env.GERRIT_CHANGE_SUBJECT} from ${env.GERRIT_CHANGE_OWNER_NAME}"
            }
            if (env.GERRIT_REFSPEC) {
                ref_spec = env.GERRIT_REFSPEC
                branch_name = env.GERRIT_PATCHSET_REVISION
            }
            else
            {
                ref_spec = '+refs/heads/*:refs/remotes/origin/*'
                branch_name = '*/blaranjosantos/cmake'
            }
            echo "Refspec for checkout: ${ref_spec}"
            checkout([$class: 'GitSCM',
                branches: [[name: "${branch_name}"]], doGenerateSubmoduleConfigurations: false,
                extensions: [[ $class: 'CleanCheckout',
                    $class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false,
                    recursiveSubmodules: true, reference: '', trackingSubmodules: false
                ]],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: 'Jenkins user',
                    url: "ssh://Jenkins@goldenpass.logitech.com:29418/ccp_fw/${params.BRANCH_NAME}",
                    refspec: "${ref_spec}"
                ]]
            ])
        } // End of stage ('Build Job - Checkout')

        stage ('Build Job - Build') {
            echo "PROJECT_NAME = ${params.PROJECT_NAME}"
            sh "git submodule update -i"
            sh "git clean -x -f"
            // Shell build step - Build production and test firmwares,
            //                    valid test dfu and phcs#1 v1.5 verification dfu files
            // Shell build step - Copy hard-coded Jenkins dfu key into dfu test key
            sh """
              cd config
              cp priv_tstkey_jenkins.pem priv_tstkey.pem
              cd ../gcc_eclipse
              ./cmake_buildAll.sh
              cd ../
			  mkdir -p build_${params.PROJECT_NAME}_release && cd build_${params.PROJECT_NAME}_release
              cmake .. -DCMAKE_BUILD_TYPE=release -DCFLAGS=-Dprot_BLEPRO_ENABLED=true -DARM_GCC_TOOL_PATH=/usr/local/gcc-arm-none-eabi-6-2017-q2-update/ -DCMAKE_TOOLCHAIN_FILE=cmake/gcc-arm-none-eabi.cmake -DBOARD=${params.PROJECT_NAME}
              make -j8
              cd ../
              mkdir -p build_ci_${params.PROJECT_NAME}_release && cd build_ci_${params.PROJECT_NAME}_release
              cmake .. -DCMAKE_BUILD_TYPE=release -DCFLAGS=-DCI_BUILD=1 -DARM_GCC_TOOL_PATH=/usr/local/gcc-arm-none-eabi-6-2017-q2-update/ -DCMAKE_TOOLCHAIN_FILE=cmake/gcc-arm-none-eabi.cmake -DBOARD=${params.PROJECT_NAME}
              make -j8
              make -j8 dfu_evt
              cd ../
              mkdir -p build_ci_${params.PROJECT_NAME}_debug && cd build_ci_${params.PROJECT_NAME}_debug
              cmake .. -DCMAKE_BUILD_TYPE=debug -DCFLAGS=-DCI_BUILD=1 -DARM_GCC_TOOL_PATH=/usr/local/gcc-arm-none-eabi-6-2017-q2-update/ -DCMAKE_TOOLCHAIN_FILE=cmake/gcc-arm-none-eabi.cmake -DBOARD=${params.PROJECT_NAME}
              make -j8
              cd ../
            """
            archiveArtifacts allowEmptyArchive: false,
                             artifacts: """**build_*/**/*.dfu,
                                           **build_*/**/${params.PROJECT_NAME}*.hex,
                                           **build_ci_*release/*.elf,
                                           **/dfu_*_key.txt,
                                           **/priv_tstkey_jenkins.pem,
                                           **build_ci_*release/*.map""",
                             caseSensitive: true,
                             defaultExcludes: true,
                             fingerprint: false,
                             onlyIfSuccessful: false
            // Clean workspace at build end
            cleanWs()
        } // End of stage ('Build Job - Build')
    } // End of node ('builder')

    node ('fw_check') {

        stage ('Firmwares Comparison Job - Checkout') {
            checkout([$class: 'GitSCM',
                branches: [[name: '*/develop']], doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'CleanCheckout']], submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: 'GithubProductsCIToken', url: "https://github.com/Logitech/py-test-box.git"]]
            ])
        } // End of stage ('Firmwares Comparison Job - Checkout')

        stage ('Firmwares Comparison Job - Build') {
            script {
                copyArtifacts(
                    filter: """**build_*release/build_${params.PROJECT_NAME}/${params.PROJECT_NAME}_prod.hex,
                               **build_ci_*release/${params.PROJECT_NAME}*.elf""",
                    projectName: env.JOB_NAME,
                    fingerprintArtifacts: true,
                    selector: specific(env.BUILD_NUMBER),
                    target: 'PYTESTBOX/TESTS/DFU_FILES'
                )

                try {
                    // Shell Unit Test step - framework initialization
                    sh """
                      python3 PYTESTBOX/LIBS/PYSETUP/pyEnvChecker.py
                    """
                    // Shell Unit Test step - production vs test firmwares comparison
                    def path = 'PYTESTBOX/TESTS/DFU_FILES/build_'
                    sh """
                      python3 PYTESTBOX/CICD/ciscripts/compare_hex.py  \
                          -f ${path}${params.PROJECT_NAME}_release/build_${params.PROJECT_NAME}/${params.PROJECT_NAME}_prod.hex  \
                          -c ${path}ci_${params.PROJECT_NAME}_release/build_${params.PROJECT_NAME}/${params.PROJECT_NAME}_prod.hex \
                          -b ${path}ci_${params.PROJECT_NAME}_release/${params.PROJECT_NAME}_btldr.elf \
                          -e ${path}ci_${params.PROJECT_NAME}_release/${params.PROJECT_NAME}_app.elf
                    """
                }
                finally {
                    try {
                        // Permission cleanup
                        sh "python3 PYTESTBOX/CICD/ciscripts/permissions_clean_up.py"
                    }
                    catch(all) {
                        echo 'Error cleaning up permissions'
                    }
                }
            }
        } // End of stage ('Firmwares Comparison Job - Build')
    } // End of node ('slave')
} // End of timestamps

