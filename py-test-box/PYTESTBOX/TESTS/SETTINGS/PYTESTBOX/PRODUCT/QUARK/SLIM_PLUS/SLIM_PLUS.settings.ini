; -----------------------------------------------------------------------------
; Python Test Harness
; -----------------------------------------------------------------------------
;
; [Summary]  Slim+ specific features
;
; [Author] Vinodh Selvaraj
;
; [DateTime]   2023/04/20
; -----------------------------------------------------------------------------

[PRODUCT]
ProductReference = 'RBK90'
ProductID = 'C548 AB07'
TransportID = ('B386',)
BluetoothPID = 'B386'
EQuadPID = 'B386'
IsMice = False
IsGaming = False

[RUNTIME/DEBUGGERS]
Targets = ("Device"                , )
Types   = ("Quark256JlinkDebugger" , )

[PRODUCT/DEVICE/BATTERY]
MaximumVoltage = 3.1
NominalVoltage = 3
CutOffVoltage = 2.0

[PRODUCT/DEVICE/FN_LOCK]
PWS_UX_V1_2 = True

[PRODUCT/DEVICE]
MaxWaitSleep = 10
MaxWaitDeepSleep = 7200
KeyboardType = 'membrane'
NbHosts = 3

[PRODUCT/DEVICE/CONNECTION_SCHEME]
Enabled = True
MultipleChannels = True
MultipleEasySwitchButtons = True

[PRODUCT/DEVICE/CONNECTION_SCHEME/BLE_PRO_CS]
Enabled = True
Version_0 = True
SafePrePairedReceiver = True
BLEServiceChangeSupport = True

[PRODUCT/DEVICE/CONNECTION_SCHEME/DEVICE_RECOVERY]
Enabled = True
RecoveryKeysVariant = "kdb-recovery-keys-make_reset_kdb-recovery-keys-break"

[PRODUCT/NVS_CHUNK_IDS]
Enabled = True

[PRODUCT/USB_COMMUNICATION]
SetIdleSupported = True

[PRODUCT/PROTOCOLS]
DefaultProtocol = "BLE_PRO"

[PRODUCT/PROTOCOLS/BLE_PRO]
Enabled = True
Version_1 = False
Version_2 = True

[PRODUCT/PROTOCOLS/BLE]
Enabled = True
ChromeSupport = True
OsDetection = True
Software_Revision = ('00590A0126',)

[PRODUCT/PROTOCOLS/BLE/ADVERTISING]
SwiftPairCapability = True
TxPower = 0x03
AuthenticationType = 0x01
DeviceType = 0x01
BootloaderReconnectionAdvertisingCompleteWindowS = 40
BootloaderReconnectionAdvertisingFirstHdcSubWindowS = 5
BootloaderReconnectionAdvertisingHdcSubWindowS = 1.28
BootloaderReconnectionAdvertisingLcdSubWindowS = 15
BootloaderReconnectionAdvertisingLcdIntervalMs = 20
BootloaderRecoveryAdvertisingCompleteWindowS = 40

[PRODUCT/FEATURES/KEYBOARD]
GhostKeyDetection = True
# Re-enable GhostKeys test suite only when firmware code aligned with specification
GhostKeys = False

# Feature 0x0000 version 2
[PRODUCT/FEATURES/IMPORTANT/ROOT]
Enabled = True
Version_1 = False
Version_2 = True
ProtocolNum = [04]
TargetSW = [05]

# Feature 0x0001 version 2
[PRODUCT/FEATURES/IMPORTANT/FEATURE_SET]
Enabled = True
Version_1 = False
Version_2 = True
FeatureCountInBLE = 0x1F
BootloaderFeatureCountInBLE = 0x05

# Feature 0x0003 version 6
[PRODUCT/FEATURES/COMMON/DEVICE_INFORMATION]
Enabled = True
Version_6 = True
EntityCount = 3
TransportUsb = False
TransportEQuad = False
TransportBTLE = True
TransportBT = False
ModelId = 'B38600000000'
ExtendedModelId = 0
CapabilitiesSerialNumber = True
FwType = ('01', '00', '05')
FwPrefix = ('BL2', 'RBK', '')
FwNumber = ('14', '90', '00')
Revision = ('00', '00', '00')
Build = ('0008', '0008', '0126')
TransportId = ('B386', 'B386', '0000')
BootLoaderTransportId = ('B386', '0000', '0000')

# Feature 0x0005 version 3
[PRODUCT/FEATURES/COMMON/DEVICE_TYPE_AND_NAME]
Enabled = True
Version_3 = True
MarketingName = 'Signature Slim K950'
DeviceType = 0

# Feature 0x0007 version 0
[PRODUCT/FEATURES/COMMON/DEVICE_FRIENDLY_NAME]
Enabled = True
Version_0 = True
NameMaxLength = 14

# Feature 0x0011 version 0
[PRODUCT/FEATURES/COMMON/PROPERTY_ACCESS]
Enabled = True
Version_0 = True
SwAccessibleProperties = ('EXTENDED_MODEL_ID', 'KEYBOARD_LAYOUT', 'SERIAL_NUMBER', 'HIDPP_DEVICE_NAME', 'SOFTWARE_EXTRA_INFORMATION')
SwAccessiblePropertiesSizes = ('HIDPP_DEVICE_NAME:50', 'SOFTWARE_EXTRA_INFORMATION:16')

# Feature 0x00C2
[PRODUCT/FEATURES/COMMON/DFU_CONTROL]
Enabled = False

# Feature 0x00C3 version 0
[PRODUCT/FEATURES/COMMON/SECURE_DFU_CONTROL]
Enabled = True
Version_0 = True
DfuControlTimeout = 30
DfuControlActionType = 1
DfuControlActionData = 0x000000

# Feature 0x00D0 version 3
[PRODUCT/FEATURES/COMMON/DFU]
Enabled = True
Version_3 = True
MagicString = "RBK90_D0A"
UpgradableEntityTypes = ('0', '5')
ErrorLevel = 3
HexFileName = "slimplus_prod.hex"
SoftDeviceDfuFileName = "slimplus_s112_nrf52810_limit.dfu"
FlashWriteVerify = False
VerifyCmd3DoneAfterCmd1And2 = False
VerifyFlag = False
LowestApplicationAddress = 0x00019000
HighestApplicationAddress = 0x00033000
AdditionalAuthentication = True
EncryptCapabilities = ('3',)
DfuStartSecurLvl = 0

# Feature 0x1004 version 4
[PRODUCT/FEATURES/COMMON/UNIFIED_BATTERY]
Enabled = True
Version_4 = True
SupportedLevels = ('100', '50', '30', '5')
CapabilitiesFlags = ('0', '1', '0', '0')
DischargeSOCmV = ('3100', '2900', '2785', '2720', '2660', '2615', '2565', '2550', '2530', '2490', '2475', '2465', '2425', '2390', '2365', '2345', '2280', '2225', '2150', '2060', '2000')
RechargeSOCmV = ()
StateOfChargeStep = 5

# Feature 0x1602 version 0
[PRODUCT/FEATURES/COMMON/PASSWORD_AUTHENTICATION]
Enabled = True
Version_0 = True
ConstantCredentials = True
FullAuthentication = False
SupportLongPassword = False

# Feature 0x1802 version 0
[PRODUCT/FEATURES/COMMON/DEVICE_RESET]
Enabled = True

# Feature 0x1803 version 0
[PRODUCT/FEATURES/COMMON/GPIO_ACCESS]
Enabled = True
Version_0 = True
NumberOfPorts = 1
GpioInputMask = ('0F700000',)
GpioInputValue = ('00000000',)
GpioOutputMask = ('F08FFFFF',)
GpioOutputValue = ('F08007F0',)
GpioUnusedMask = ('00000000',)
GpioForbiddenMask = ('00000000',)

# Feature 0x1805 version 0
[PRODUCT/FEATURES/COMMON/OOB_STATE]
# TODO: reactivate after the hotfix on this feature is done
Enabled = False
Version_0 = True

# Feature 0x1807 version 3
[PRODUCT/FEATURES/COMMON/CONFIGURABLE_PROPERTIES]
Enabled = True
Version_3 = True
SupportedProperties = ('EXTENDED_MODEL_ID', 'KEYBOARD_LAYOUT', 'BLE_GAP_ADV_OUTPUT_POWER', 'SERIAL_NUMBER', 'HIDPP_DEVICE_NAME', 'USB_VID', 'BLE_GAP_APP_NAME', 'BLE_GAP_BL_ADV_NAME_SIZE', 'BLE_GAP_APP_ADV_NAME_SIZE', 'BLE_GAP_BL_SR_NAME_SIZE', 'BLE_GAP_APP_SR_NAME_SIZE', 'BLE_DIS_BL_PID', 'BLE_DIS_APP_PID', 'BLE_DIS_MANUFACTURER_NAME', 'BLE_DIS_BL_MODEL_NUMBER', 'BLE_DIS_APP_MODEL_NUMBER', 'SOFTWARE_EXTRA_INFORMATION', 'DISABLE_EASY_PAIRING')
SpecificPropertiesSizes = ('EXTENDED_MODEL_ID:1', 'KEYBOARD_LAYOUT:1', 'BLE_GAP_ADV_OUTPUT_POWER:1', 'SERIAL_NUMBER:12', 'HIDPP_DEVICE_NAME:50', 'USB_VID:2', 'BLE_GAP_APP_NAME:14', 'BLE_GAP_BL_ADV_NAME_SIZE:1', 'BLE_GAP_APP_ADV_NAME_SIZE:1', 'BLE_GAP_BL_SR_NAME_SIZE:1', 'BLE_GAP_APP_SR_NAME_SIZE:1', 'BLE_DIS_BL_PID:2', 'BLE_DIS_APP_PID:2', 'BLE_DIS_MANUFACTURER_NAME:32', 'BLE_DIS_BL_MODEL_NUMBER:32', 'BLE_DIS_APP_MODEL_NUMBER:32', 'SOFTWARE_EXTRA_INFORMATION:16')

# Feature 0x1814 version 1
[PRODUCT/FEATURES/COMMON/CHANGE_HOST]
Enabled = True
Version_1 = True

# Feature 0x1815 version 2
[PRODUCT/FEATURES/COMMON/HOSTS_INFO]
Enabled = True
Version_2 = True
SupportSetOSVersion = True
SupportSetName = True
SupportGetName = True
SupportBLEDescriptor = True
HostNameMaxLength = 24

# Feature 0x1816 version 0
[PRODUCT/FEATURES/COMMON/BLE_PRO_PREPAIRING]
Enabled = True
Version_0 = True
KeysSupported = 0x67

# Feature 0x1830 version 0
[PRODUCT/FEATURES/COMMON/POWER_MODES]
Enabled = True
Version_0 = True
TotalNumber = 4
NumberList = '0 1 2 3'
CurrentThresholdDeepSleep = 86

# Feature 0x1861 version 1
[PRODUCT/FEATURES/COMMON/BATTERY_LEVELS_CALIBRATION]
Enabled = True
Version_1 = True
Comparator = True
CompVRef = 1.8
AdcCoefficient = 0.2844
RequiredCalibrationPointNb = 2
RequiredCalibrationPoints = ('07D0', '0C1C')

# Feature 0x1891 version 9 #TODO

# Feature 0x18a1 version 0 #TODO

# Feature 0x18B0 version 1
[PRODUCT/FEATURES/COMMON/STATIC_MONITOR_MODE]
Enabled = True
Version_1 = True
KeyboardMode = True
EnhancedKeyboardMode = True
KeyboardWithLargerMatrixMode = True
EnhancedKeyboardWithLargerMatrixMode = True

# Feature 0x1B04 version 6
[PRODUCT/FEATURES/COMMON/SPECIAL_KEYS_MSE_BUTTONS]
Enabled = True
Version_6 = True
CidCount = 27
CidListWithoutGhostKey = ('00E9', '0118', '0108', '011C', '00E5')

# Feature 0x1B04 version 6 CID Info Table
[PRODUCT/FEATURES/COMMON/SPECIAL_KEYS_MSE_BUTTONS/CID_INFO_TABLE]
Enabled = True
FriendlyName                      = ('Brightness Down'     , 'Brightness Up'       , 'Task View'           , 'App Switch'          , 'Dictation'           , 'Emoji'               , 'Mute Microphone'     , 'Previous Track'      , 'Play Pause'          , 'Next Track'          , 'Mute'                , 'Volume Down'         , 'Volume Up'           , 'Host 1'              , 'Host 2'              , 'Host 3'              , 'Calculator'          , 'Screen Capture'      , 'Search'              , 'Screen Lock'         , 'Language Switch'     , 'Delete'              , 'Home'                , 'End'                 , 'Page Up'             , 'Page Down'           , 'Esc'                 , )
Cid                               = ('0xC7'                , '0xC8'                , '0xE0'                , '0x109'               , '0x103'               , '0x108'               , '0x11C'               , '0xE4'                , '0xE5'                , '0xE6'                , '0xE7'                , '0xE8'                , '0xE9'                , '0xD1'                , '0xD2'                , '0xD3'                , '0x0A'                , '0x10A'               , '0xD4'                , '0x6F'                , '0x121'               , '0x117'               , '0x118'               , '0x119'               , '0x11A'               , '0x11B'               , '0xDE'                , )
Task                              = ('0xA3'                , '0xA4'                , '0xBF'                , '0xDE'                , '0xD8'                , '0xDD'                , '0xF1'                , '0x06'                , '0x04'                , '0x05'                , '0x03'                , '0x02'                , '0x01'                , '0xAE'                , '0xAF'                , '0xB0'                , '0x0A'                , '0xDF'                , '0xB1'                , '0x44'                , '0xF6'                , '0xEC'                , '0xED'                , '0xEE'                , '0xEF'                , '0xF0'                , '0x62'                , )
FlagVirtual                       = ('False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , )
FlagPersist                       = ('False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , )
FlagDivert                        = ('True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'False'               , 'False'               , 'False'               , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'False'               , 'True'                , 'True'                , 'True'                , 'True'                , 'False'               , )
FlagReprog                        = ('True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'False'               , 'False'               , 'False'               , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'False'               , 'True'                , 'True'                , 'True'                , 'True'                , 'False'               , )
FlagFnTog                         = ('True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , )
FlagHotKey                        = ('False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , )
FlagMouse                         = ('False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , )
FlagFKey                          = ('True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , )
Pos                               = ('0x01'                , '0x02'                , '0x03'                , '0x04'                , '0x05'                , '0x06'                , '0x07'                , '0x08'                , '0x09'                , '0x0A'                , '0x0B'                , '0x0C'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , )
Group                             = ('0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , )
GMask                             = ('0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , '0x00'                , )
AdditionalFlagsRawWheel           = ('False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , )
AdditionalFlagsAnalyticsKeyEvents = ('True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , 'True'                , )
AdditionalFlagsForceRawXY         = ('False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , )
AdditionalFlagsRawXY              = ('False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , 'False'               , )

# Feature 0x1D4B version 0
[PRODUCT/FEATURES/COMMON/WIRELESS_DEVICE_STATUS]
Enabled = True

# Feature 0x1E00 version 0 (Enabled in PRODUCT.settings.ini)

# Feature 0x1E02 version 0
[PRODUCT/FEATURES/COMMON/MANAGE_DEACTIVATABLE_FEATURES_AUTH]
Enabled = True
Version_0 = True
SupportManufacturing = True
SupportCompliance = True
SupportGotthard = True
PersistentActivationManufacturing = False
PersistentActivationCompliance = False
PersistentActivationGotthard = True
AuthFeature = 0x1602

# Feature 0x1EB0 version 0
[PRODUCT/FEATURES/COMMON/TDE_ACCESS_TO_NVM]
Enabled = True
Version_0 = True
TdeMaxSize = 0x20

# Feature 0x40A3 version 0
[PRODUCT/FEATURES/KEYBOARD/FN_INVERSION_FOR_MULTI_HOST_DEVICES]
Enabled = True
Version_0 = True
HasFnLock= True
FnInversionDefaultState = 1

# Feature 0x4220 version 0
[PRODUCT/FEATURES/KEYBOARD/LOCK_KEY_STATE]
Enabled = False
Version_0 = True

# Feature 0x4521 version 0
[PRODUCT/FEATURES/KEYBOARD/DISABLE_KEYS]
Enabled = True
Version_0 = True
CapsLock = True
NumLock = True
ScrollLock = True
Insert = True
Windows = True
DefaultDisabledKeys = 0

# Feature 0x4531 version 1
[PRODUCT/FEATURES/KEYBOARD/MULTI_PLATFORM]
Enabled = True
Version_1 = True
# platform descriptor
OsMask = ('21', '32', '64', '8')
PlatformSource = ('0', '0', '0')
PlatformIndex = ('0', '255', '255')
AutoPlatform = ('255', '255', '255')
AutoDescriptor = ('255', '255', '255')
# platform info
OsDetection = True
SetHostPlatform = True

# Feature 0x4540 version 1
[PRODUCT/FEATURES/KEYBOARD/KEYBOARD_INTERNATIONAL_LAYOUTS]
Enabled = True
Version_1 = True
KeyboardLayout = 0

[RECEIVER/ENUMERATION]
Number_Of_Pairing_Slots = 06

[RECEIVER/TDE]
Enabled = False
Prepairing = False
Non_Volatile_Memory_Access_Size = 16
IRK = True
CSRK = False

[PRODUCT/HID_REPORT]
# https://docs.google.com/spreadsheets/d/1jdQ-WEVNmfepdH6lxDKLfZSQwVL4keXqh0Rq44ZrfUM/edit#gid=2032643977&range=F67
HidGuidelinesVersion = 2.8
HidKeyboardType = 'HidKeyboard'
ProductSpecificUsages = ('BRIGHTNESS_DOWN', 'BRIGHTNESS_UP', 'VOICE_DICTATION', 'EMOJI_PICKER', 'START_OR_STOP_MICROPHONE_CAPTURE', 'SCAN_PREVIOUS_TRACK', 'PLAY_PAUSE','SCAN_NEXT_TRACK', 'MUTE', 'MENU', 'AL_CALCULATOR', 'AC_VIEW_TOGGLE', 'POWER', 'AC_SEARCH', 'VOLUME_DOWN', 'VOLUME_UP',)
TopRowUsagesCount = 0x0C

[PRODUCT/NVS_UICR]
MagicNumber = True

[PRODUCT/LATENCY/SWITCH_LATENCY]
Enabled = True
# Switch latency on BLE Pro or BLE pro in run mode in us
MinSwitchLatencyRunMode = 200
AvgPressLatencyRunMode = 16000
Percentile95PressLatencyRunMode = 32000
AvgReleaseLatencyRunMode = 36000
Percentile95ReleaseLatencyRunMode = 72000
# Switch latency time on BLE or BLE Pro or LS2 in sleep mode in us
MinSwitchLatencySleepMode = 200
AvgSwitchLatencySleepMode = 16000
Percentile95SwitchLatencySleepMode = 32000
# Switch latency time on BLE or BLE Pro or LS2 in deep sleep mode in us
MinSwitchLatencyDeepSleepMode = 10000
AvgSwitchLatencyDeepSleepMode = 120000
Percentile95SwitchLatencyDeepSleepMode = 240000

[SHARED/DEVICES]
# List devices for each device dependent property
Type = ('1',)
Name = ('Logi K950',)
BLEProServiceVersion = ('01',)
ExtendedModelId = ('0',)
PrePairingAuthMethod = ('1',)
PasskeyAuthMethod = ('1',)
Passkey2ButtonsAuthMethod = ('0',)
AuthEntropy = ('20',)
RootFeatureVersion = ('2',)

[SHARED/DISCOVERY]
Enabled = True

[SHARED/PAIRING]
Enabled = True
BLEDevicePairing = True
PasskeyAuthenticationMethod = True
BLEProOsDetection = True
BLELatencyRemoval = True

[BUG_TRACKER]
Bug_AnalyticsKeyEvents_CID_Packing = True
Bug_DivertedButtonsEvent_5th_CID_fill_in = True
Bug_BLE_GAP_Appearance_Bootloader = True
Bug_BLE_Unsupported_Report_Map = True
Bug_Dictation_Abort_Handling = True
Bug_Pairing_Mode_Long_Press_Timeout_Reset = True
Bug_Sticky_Keys_In_Monitor_Mode_Event = True
Bug_MonitorMode_BadRowColValues = True
Bug_Erasing_Leading_Zero = True