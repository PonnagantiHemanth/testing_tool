// -------------------------------------
// Pipeline Configuration Section
properties([
    parameters([
        string(name: 'PYTESTBOX_BRANCH_NAME', defaultValue: '*/develop', description: 'pyTestBox repo branch name', ),
        string(name: 'BRANCH_NAME', defaultValue: 'nrf52_dual_bank', description: 'Project branch name on goldenpass', ),
        string(name: 'PROJECT_NAME', defaultValue: 'hadron', description: 'Project name', ),
        string(name: 'CODE_PATCHSET', defaultValue: '', description: 'optional patchset on goldenpass', )
  ]),
// End of Pipeline Configuration Section
// -------------------------------------
    pipelineTriggers([
        // Trigger on every update on master 
        gerrit(
            serverName: 'goldenpass',
            gerritProjects: [[
                compareType: 'PLAIN',
                pattern: "ccp_fw/${params.BRANCH_NAME}",
                branches: [[ compareType: 'PLAIN', pattern: 'master' ]],
                disableStrictForbiddenFileVerification: false
            ]],
            triggerOnEvents: [
                patchsetCreated(excludeDrafts: true, excludeNoCodeChange: true)
            ]
        )
    ]),
])

timestamps {
    node (label: "builder_ci && dual_bank") {
        stage ('Build Job - Checkout') {
            if (env.GERRIT_CHANGE_SUBJECT && env.GERRIT_CHANGE_OWNER_NAME) {
                echo "ChangeLog: ${env.GERRIT_CHANGE_SUBJECT} from ${env.GERRIT_CHANGE_OWNER_NAME}"
            }
            if (env.GERRIT_REFSPEC) {
                ref_spec = env.GERRIT_REFSPEC
                branch_name = env.GERRIT_PATCHSET_REVISION
            }
            else
            {
                ref_spec = '+refs/heads/*:refs/remotes/origin/*'
                branch_name = '*/master'
            }
            echo "Refspec for checkout: ${ref_spec}"
            checkout([$class: 'GitSCM',
                branches: [[name: "${branch_name}"]], doGenerateSubmoduleConfigurations: false,
                extensions: [[ $class: 'CleanCheckout'],
                    [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false,
                    recursiveSubmodules: false, reference: '', trackingSubmodules: false
                ]],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: 'Jenkins user',
                    url: "ssh://Jenkins@goldenpass.logitech.com:29418/ccp_fw/${params.BRANCH_NAME}",
                    refspec: "${ref_spec}"
                ]]
            ])
        } // End of stage ('Build Job - Checkout')

        stage ('Build Job - Build') {
            script {
                try {
                  timeout(time: 40, unit: 'MINUTES', activity: true) {
                    echo "PROJECT_NAME = ${params.PROJECT_NAME}"
                    if (params.CODE_PATCHSET != '') {
                      // Shell build step - sync on a patchset
                      sh "git fetch ssh://Jenkins@goldenpass.logitech.com:29418/ccp_fw/${params.BRANCH_NAME} refs/changes/${params.CODE_PATCHSET}"
                      sh "git checkout FETCH_HEAD"
                    }
                    sh "git submodule update --init"
                    sh "git submodule sync --recursive"
                    sh "git submodule update --init --recursive"
                    sh "git clean -x -f"
                    echo "Build All projects"
                    sh """
                      cd build
                      ./cleanAll.sh
                      CFLAGS=-Werror ./buildAll.sh
                    """
                    echo "Build main project"
                    sh """
                      cd build
                      make clean PROJECT="${params.PROJECT_NAME}" OUT_DIR_PFX=build_ci
                      CPPFLAGS="-DCI_BUILD=1 -Dprot_BLEPRO_ENABLED=true" make PROJECT="${params.PROJECT_NAME}" OUT_DIR_PFX=build_ci
                      make clean PROJECT="${params.PROJECT_NAME}"
                      CPPFLAGS="-Dprot_BLEPRO_ENABLED=true" make PROJECT="${params.PROJECT_NAME}"
                    """
                    sh(returnStdout: true, script: '''#!/bin/bash
                      if [ ! -z "$(git status --porcelain)" ]; then
                        echo "Uncommitted changes in tracked files"
                        echo "$(git status --porcelain)"
                        exit 1
                      fi
                    '''.stripIndent())
                  }
                }
                finally {
                    archiveArtifacts allowEmptyArchive: false,
                                     artifacts: """**build/build_ci_${params.BRANCH_NAME}_${params.PROJECT_NAME}/${params.BRANCH_NAME}_*.hex,
                                                   **build/build_${params.BRANCH_NAME}_${params.PROJECT_NAME}/${params.BRANCH_NAME}_*.hex,
                                                   **app_slot0/${params.SLOT_0_BRANCH_NAME}/config/dfu_*_key.txt""",
                                     caseSensitive: true,
                                     defaultExcludes: true,
                                     fingerprint: false,
                                     onlyIfSuccessful: false
                    // Clean workspace at build end
                    cleanWs()
                }
            }
        } // End of stage ('Build Job - Build')
    } // End of node ('builder' && 'dual_bank')

} // End of timestamps