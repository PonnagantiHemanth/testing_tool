// -------------------------------------
// Pipeline Configuration Section
properties([
    parameters([
        string(name: 'PROJECT_NAME', defaultValue: 'quark', description: 'firmware hex file name', ),
        string(name: 'BRANCH_NAME', defaultValue: 'quark', description: 'project branch name on goldenpass', ),
        string(name: 'CODE_PATCHSET', defaultValue: '', description: 'optional patchset on goldenpass', ),
        string(name: 'CODE_TAG', defaultValue: '', description: 'optional tag on goldenpass', ),
        string(name: 'SOC_NAME', defaultValue: 'QUARK256', description: 'System on a Chip definition', ),
        string(name: 'PYTESTBOX_BRANCH_NAME', defaultValue: '*/develop', description: 'pyTestBox repo branch name', ),
    ]),
// End of Pipeline Configuration Section
// -------------------------------------
    pipelineTriggers([
        // Trigger on every update on master 
        gerrit(
            serverName: 'goldenpass',
            gerritProjects: [[
                compareType: 'PLAIN',
                pattern: "ccp_fw/${params.BRANCH_NAME}",
                branches: [[ compareType: 'PLAIN', pattern: 'master' ]],
                disableStrictForbiddenFileVerification: false
            ]],
            triggerOnEvents: [
                patchsetCreated(excludeDrafts: true, excludeNoCodeChange: true)
            ]
        )
    ]),
])

timestamps {

    node ('builder') {

        stage ('Build Job - Checkout') {
            if (env.GERRIT_CHANGE_SUBJECT && env.GERRIT_CHANGE_OWNER_NAME) {
                echo "ChangeLog: ${env.GERRIT_CHANGE_SUBJECT} from ${env.GERRIT_CHANGE_OWNER_NAME}"
            }
            if (env.GERRIT_REFSPEC) {
                ref_spec = env.GERRIT_REFSPEC
                branch_name = env.GERRIT_PATCHSET_REVISION
            }
            else
            {
                ref_spec = '+refs/heads/*:refs/remotes/origin/*'
                branch_name = '*/master'
            }
            echo "Refspec for checkout: ${ref_spec}"
            checkout([$class: 'GitSCM',
                branches: [[name: "${branch_name}"]], doGenerateSubmoduleConfigurations: false,
                extensions: [[ $class: 'CleanCheckout'],
                    [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false,
                    recursiveSubmodules: true, reference: '', trackingSubmodules: false
                ]],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: 'Jenkins user',
                    url: "ssh://Jenkins@goldenpass.logitech.com:29418/ccp_fw/${params.BRANCH_NAME}",
                    refspec: "${ref_spec}"
                ]]
            ])
        } // End of stage ('Build Job - Checkout')

        stage ('Build Job - Build') {
            script {
                try {
                  timeout(time: 40, unit: 'MINUTES', activity: true) {
                    echo "PROJECT_NAME = ${params.PROJECT_NAME}"
                    if (params.CODE_PATCHSET != '') {
                      // Shell build step - sync on a patchset
                      sh "git fetch ssh://Jenkins@goldenpass.logitech.com:29418/ccp_fw/${params.BRANCH_NAME} refs/changes/${params.CODE_PATCHSET}"
                      sh "git checkout FETCH_HEAD"
                    } else {
                      if (params.CODE_TAG != '') {
                        // Shell build step - sync on a tag
                        sh "git checkout tags/${params.CODE_TAG}"
                      }
                    }
                    sh "git submodule update -i"
                    sh "git clean -x -f"
                    // Shell build step - Build production and test firmwares,
                    //                    valid test dfu and phcs#1 v1.5 verification dfu files
                    // Shell build step - Copy hard-coded Jenkins dfu key into dfu test key
                    sh """
                      cd gcc_eclipse
                      ./cleanAll.sh
                      cp ../config/priv_tstkey_jenkins.pem ../config/priv_tstkey.pem
                      CFLAGS=-Werror ./buildAll.sh
                      make clean PROJECT=${params.PROJECT_NAME}
                      make clean PROJECT=${params.PROJECT_NAME} OUT_DIR_PFX=build_ci
                      CPPFLAGS="-Dprot_BLEPRO_ENABLED=true" make -j8 BUILD_CONFIG=PROD PROJECT=${params.PROJECT_NAME}
                      CPPFLAGS="-DCI_BUILD=1 -Dprot_BLEPRO_ENABLED=true" make -j8 PROJECT=${params.PROJECT_NAME} OUT_DIR_PFX=build_ci
                      CPPFLAGS="-DCI_BUILD=1 -Dprot_BLEPRO_ENABLED=true" make -j8 BUILD_CONFIG=PROD PROJECT=${params.PROJECT_NAME} OUT_DIR_PFX=build_ci dfu_evt
                      echo "Check dual bank project"
                      cd ../gcc_dual_bank
                      ./cleanAll.sh
                      CFLAGS=-Werror ./buildAll.sh
                    """
                    sh(returnStdout: true, script: '''#!/bin/bash
                      if [ ! -z "$(git status --porcelain)" ]; then
                        echo "Uncommitted changes in tracked files"
                        echo "$(git status --porcelain)"
                        exit 1
                      fi
                    '''.stripIndent())
                    // Copy the PEM file which stored the RSA public key for this project (Extract its name from the json file)
                    sh """#!/bin/bash
                      echo "The RSA public key filename is: `cat lfa/logisign/prod/project/${params.PROJECT_NAME}.json | jq .key_id | sed 's/"//g'`.pem"
                      cp lfa/logisign/prod/rsassa-pkcs1-v1_5-rsa-2048/\$(echo `cat lfa/logisign/prod/project/${params.PROJECT_NAME}.json | jq .key_id | sed 's/"//g'`).pem ${params.PROJECT_NAME}.pem
                    """
                  }
                }
                finally {
                    archiveArtifacts allowEmptyArchive: false,
                                     artifacts: """**gcc_eclipse/**/*.dfu,
                                                   **gcc_eclipse/build_*/${params.PROJECT_NAME}*.hex,
                                                   **gcc_eclipse/build_ci_*prod/${params.PROJECT_NAME}*.elf,
                                                   **/dfu_*_key.txt,
                                                   **gcc_eclipse/build_ci_*prod/*.map,
                                                   **${params.PROJECT_NAME}.pem""",
                                     caseSensitive: true,
                                     defaultExcludes: true,
                                     fingerprint: false,
                                     onlyIfSuccessful: false
                    // Clean workspace at build end
                    cleanWs()
                }
            }
        } // End of stage ('Build Job - Build')
    } // End of node ('builder')

    node ('fw_check') {

        stage ('Firmwares Comparison Job - Checkout') {
            checkout([$class: 'GitSCM',
                branches: [[name: "${params.PYTESTBOX_BRANCH_NAME}"]], doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'CleanCheckout'],
                    [$class: 'PruneStaleBranch'], pruneTags(true),
                    [$class: 'SubmoduleOption',
                    disableSubmodules: false,
                    parentCredentials: true,
                    recursiveSubmodules: true,
                    reference: '',
                    trackingSubmodules: false
                ]],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: 'GithubProductsCIToken', url: "https://github.com/Logitech/py-test-box.git"]]
            ])
        } // End of stage ('Firmwares Comparison Job - Checkout')

        stage ('Firmwares Comparison Job - Build') {
            script {
                copyArtifacts(
                    filter: """**gcc_eclipse/build_*/${params.PROJECT_NAME}_prod.hex,
                               **gcc_eclipse/build_ci_*prod/${params.PROJECT_NAME}*.elf,
                               **${params.PROJECT_NAME}.pem""",
                    projectName: env.JOB_NAME,
                    fingerprintArtifacts: true,
                    selector: specific(env.BUILD_NUMBER),
                    target: 'PYTESTBOX/TESTS/DFU_FILES'
                )

                try {
                    // Shell Unit Test step - framework initialization
                    sh """
                      python3 PYTESTBOX/LIBS/PYSETUP/pyEnvChecker.py
                    """
                    // Shell Unit Test step - production vs test firmwares comparison
                    def path = 'PYTESTBOX/TESTS/DFU_FILES/gcc_eclipse/build_'
                    sh """
                      python3 PYTESTBOX/CICD/ciscripts/compare_hex.py  \
                          -f ${path}${params.PROJECT_NAME}/${params.PROJECT_NAME}_prod.hex  \
                          -c ${path}ci_${params.PROJECT_NAME}/${params.PROJECT_NAME}_prod.hex \
                          -b ${path}ci_${params.PROJECT_NAME}_btldr_prod/${params.PROJECT_NAME}_btldr.elf \
                          -e ${path}ci_${params.PROJECT_NAME}_app_prod/${params.PROJECT_NAME}_app.elf \
                          -r PYTESTBOX/TESTS/DFU_FILES/${params.PROJECT_NAME}.pem
                    """
                }
                finally {
                    try {
                        // Permission cleanup
                        sh "python3 PYTESTBOX/CICD/ciscripts/permissions_clean_up.py"
                    }
                    catch(all) {
                        echo 'Error cleaning up permissions'
                    }
                }
            }
        } // End of stage ('Firmwares Comparison Job - Build')
    } // End of node ('slave')
} // End of timestamps