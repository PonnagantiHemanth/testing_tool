#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------
# Python Test Box
# ----------------------------------------------------------------------------
""" @package pytestbox.timings.switch_latency

@brief  Validates switch latency timings

@author Christophe Roquebert

@date   2019/11/28
"""
# ----------------------------------------------------------------------------
# imports
# ----------------------------------------------------------------------------
from pytestbox.timings.main_loop import TimingsTestCase
from pyharness.selector import features
from pyharness.extensions import level
from pyharness.selector import services
from pylibrary.tools.rttprofiler import Profiler
from pylibrary.tools.rttprofiler import RelativeMeasure
from pylibrary.tools.rttprofiler import ProfilerExecutor
from time import sleep


# ----------------------------------------------------------------------------
# implementation
# ----------------------------------------------------------------------------
BUTTON_PRESSED_TAG = 000
RF_TRANSFER_READY_TAG = 000
SWITCH_LATENCY = RelativeMeasure(BUTTON_PRESSED_TAG, RF_TRANSFER_READY_TAG)


class SwitchLatencyTestCase(TimingsTestCase):
    """
    Validates Switch latency time measurement TestCases
    """
    def setUp(self):
        """
        Handles test prerequisites.
        """
        super().setUp()

        self.profiler = Profiler(relative_measurements=(SWITCH_LATENCY,))
        self.profiler_exec = ProfilerExecutor(self.debugger.get_jlink(), self.parser, self.profiler)
    # end def setUp

    @features('Timings')
    @level('Functionality')
    @services('Debugger')
    def test_button_pressed(self):
        """
        @tc_synopsis Validates the button pressed latency meaning the time from the click event
                     to the report being ready to be transmitted by the RF block
        """
        # ---------------------------------------------------------------------------
        self.logTitle2("""Test Step 1: 'Make' event generated by the 'ButtonPressed' service""")
        # ---------------------------------------------------------------------------

        self.profiler_exec.start_capture(self.debugger.get_rtt_address())
        sleep(5)

        self.profiler_exec.stop_capture()

        self.profiler.get_min_max()

        self.testCaseChecked("FNT_TIME_0010")
    # end def test_button_pressed
# end class SwitchLatencyTestCase

# ----------------------------------------------------------------------------
# END OF FILE
# ----------------------------------------------------------------------------
