#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------------------------------------------------
# Python Test Box
# ----------------------------------------------------------------------------------------------------------------------
"""
:tool: This file has been generated using 'code generator tool version 1.2'
:package: pytestbox.device.hidpp20.common.feature_18b0.performance
:brief: HID++ 2.0 ``StaticMonitorMode`` performance test suite
:author: gautham S B <gsb@logitech.com>
:date: 2023/02/21
"""
# ----------------------------------------------------------------------------------------------------------------------
# imports
# ----------------------------------------------------------------------------------------------------------------------
from pyharness.extensions import level
from pyharness.selector import features
from pyharness.selector import services
from pytestbox.base.loghelper import LogHelper
from pytestbox.device.hidpp20.common.feature_18b0.staticmonitormode import StaticMonitorModeTestCase

# ----------------------------------------------------------------------------------------------------------------------
# constants
# ----------------------------------------------------------------------------------------------------------------------
_AUTHOR = "Gautham S B"


# ----------------------------------------------------------------------------------------------------------------------
# implementation
# ----------------------------------------------------------------------------------------------------------------------
class StaticMonitorModePerformanceTestCase(StaticMonitorModeTestCase):
    """
    Validate ``StaticMonitorMode`` performance test cases
    """

    @features("Feature18B0")
    @level("Timing")
    @services("OpticalSensor")
    def test_mouse_set_monitor_mode_and_check_x_y(self):
        """
        Validate X & Y values are reported correctly when changed continuously (mouse)

        [0] setMonitorMode(mode)
        """
        raise NotImplementedError("To be implemented when @services('OpticalSensor') is available")
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, "Test loop over (every 500us, 1ms or 4ms depending on DUT)")
        # --------------------------------------------------------------------------------------------------------------
        for _ in []:  # TODO: fill this condition
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, "Send SetMonitorMode request with mode: 2")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check SetMonitorModeResponse fields")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_info(self, "Test loop over X values [-32767 (0x8001) .. -1 (0xFFFF), 0..32767 (0x7FFF)]")
            # ----------------------------------------------------------------------------------------------------------
            for _ in []:  # TODO: fill this condition
                # ------------------------------------------------------------------------------------------------------
                LogHelper.log_info(self, "Test loop over Y values [-32767 (0x8001) .. -1 (0xFFFF), 0..32767 (0x7FFF)]")
                # ------------------------------------------------------------------------------------------------------
                for _ in []:  # TODO: fill this condition
                    # --------------------------------------------------------------------------------------------------
                    LogHelper.log_step(self, "UserAction: Move the mouse in every (x,y) value")
                    # --------------------------------------------------------------------------------------------------

                    # --------------------------------------------------------------------------------------------------
                    LogHelper.log_check(self, "Check MonitorModeEvent reported X & Y values correctly")
                    # --------------------------------------------------------------------------------------------------
                # end for
                # ------------------------------------------------------------------------------------------------------
                LogHelper.log_info(self, "End test loop")
                # ------------------------------------------------------------------------------------------------------
            # end for
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_info(self, "End test loop")
            # ----------------------------------------------------------------------------------------------------------
        # end for
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, "End test loop")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetMonitorMode request with mode: 0 (OFF)")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check SetMonitorModeResponse fields")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("PER_18B0_0001", _AUTHOR)
    # end def test_mouse_set_monitor_mode_and_check_x_y
# end class StaticMonitorModePerformanceTestCase

# ----------------------------------------------------------------------------------------------------------------------
# END OF FILE
# ----------------------------------------------------------------------------------------------------------------------
