#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------------------------------------------------
# Python Test Box
# ----------------------------------------------------------------------------------------------------------------------
"""
:tool: This file has been generated using 'code generator tool version 1.2'
:package: pytestbox.device.hidpp20.mouse.feature_2150.functionality
:brief: HID++ 2.0 ``Thumbwheel`` functionality test suite
:author: Gautham S B <gsb@logitech.com>
:date: 2022/12/14
"""
# ----------------------------------------------------------------------------------------------------------------------
# imports
# ----------------------------------------------------------------------------------------------------------------------
from unittest import skip

from pyharness.extensions import level
from pyharness.selector import features
from pyhid.hidpp.features.mouse.thumbwheel import Thumbwheel
from pytestbox.base.loghelper import LogHelper
from pytestbox.device.base.devicetestutils import DeviceTestUtils
from pytestbox.device.base.thumbwheelutils import ThumbwheelTestUtils
from pytestbox.device.hidpp20.mouse.feature_2150.thumbwheel import ThumbwheelTestCase

# ----------------------------------------------------------------------------------------------------------------------
# constants
# ----------------------------------------------------------------------------------------------------------------------
_AUTHOR = "Gautham S B"


# ----------------------------------------------------------------------------------------------------------------------
# implementation
# ----------------------------------------------------------------------------------------------------------------------
class ThumbwheelFunctionalityTestCase(ThumbwheelTestCase):
    """
    Validate ``Thumbwheel`` functionality test cases
    """

    @features("Feature2150")
    @level("Functionality")
    def test_set_wheel_mode(self):
        """
        Validate reporting_mode and inv_dir value can be returned by GetThumbwheelStatus after SetThumbwheelReporting 
        
        [1] GetThumbwheelStatus() -> reporting mode, inv_dir, touch, proxy
        [2] SetThumbwheelReporting(reporting mode, inv_dir)
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, "Test Loop over reporting_mode in range [0..1]")
        # --------------------------------------------------------------------------------------------------------------
        for reporting_mode in [Thumbwheel.REPORTING_MODE.HID, Thumbwheel.REPORTING_MODE.HIDPP]:
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_info(self, "Test Loop over inv_dir in range [0..1]")
            # ----------------------------------------------------------------------------------------------------------
            for inv_dir in [ThumbwheelTestUtils.DEFAULT_DIR, ThumbwheelTestUtils.INVERTED_DIR]:
                # ------------------------------------------------------------------------------------------------------
                LogHelper.log_step(self, f"Send SetThumbwheelReporting with reporting_mode = {reporting_mode} and "
                                         f"inv_dir = {inv_dir}")
                # ------------------------------------------------------------------------------------------------------
                response = ThumbwheelTestUtils.HIDppHelper.set_thumbwheel_reporting(test_case=self,
                                                                                    reporting_mode=reporting_mode,
                                                                                    invert_direction=inv_dir)

                # ------------------------------------------------------------------------------------------------------
                LogHelper.log_check(self, "Validate SetThumbwheelReporting response fields.")
                # ------------------------------------------------------------------------------------------------------
                checker = DeviceTestUtils.MessageChecker
                check_map = {}
                checker.check_fields(self, response, self.feature_2150.set_thumbwheel_reporting_response_cls, check_map)

                # ------------------------------------------------------------------------------------------------------
                LogHelper.log_step(self, "Send GetThumbwheelStatus")
                # ------------------------------------------------------------------------------------------------------
                response = ThumbwheelTestUtils.HIDppHelper.get_thumbwheel_status(self)

                # ------------------------------------------------------------------------------------------------------
                LogHelper.log_check(self, f"Check GetThumbwheelStatus.reporting_mode = {reporting_mode} and "
                                          f"GetThumbwheelStatus.inv_dir = {inv_dir}")
                # ------------------------------------------------------------------------------------------------------
                checker = ThumbwheelTestUtils.GetThumbwheelStatusResponseChecker
                check_map = checker.get_check_map(self, proxy=0, touch=0, invert_dir=inv_dir)
                check_map.update({
                    "reporting_mode": (checker.check_reporting_mode, reporting_mode)
                })
                checker.check_fields(self, response, self.feature_2150.get_thumbwheel_status_response_cls, check_map)
            # end for
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_info(self, "End Test Loop")
            # ----------------------------------------------------------------------------------------------------------
        # end for
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, "End Test Loop")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting with reporting_mode=0 and inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------
        response = ThumbwheelTestUtils.HIDppHelper.set_thumbwheel_reporting(test_case=self,
                                                                            reporting_mode=Thumbwheel.REPORTING_MODE.HID
                                                                            , invert_direction=0)

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Validate SetThumbwheelReporting response fields where reporting_mode=0 and "
                                  "inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------
        checker = DeviceTestUtils.MessageChecker
        check_map = {}
        checker.check_fields(self, response, self.feature_2150.set_thumbwheel_reporting_response_cls, check_map)

        self.testCaseChecked("FUN_2150_0001", _AUTHOR)
    # end def test_set_wheel_mode

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_lower_rotation_angle_not_considered_motion(self):
        """
        Validate Lower Rotation angle is not considered as motion
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GetThumbwheelReporting request with reporting_mode=1 and inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Validate GetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GeThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode echoes the request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, "Test Loop over Kosmos wheel emulator angle in[1..2]")
        # --------------------------------------------------------------------------------------------------------------
        for _ in []:  # TODO: fill this condition
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, "Set Kosmos wheel emulator direction to positive")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check no notification received in HID Queue.")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check no thumbwheelEvent received.")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, "Set Kosmos wheel emulator direction to negative")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check no notification received in HID Queue.")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check no thumbwheelEvent received.")
            # ----------------------------------------------------------------------------------------------------------
        # end for
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, "End Test Loop")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0002", _AUTHOR)
    # end def test_lower_rotation_angle_not_considered_motion

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_higher_rotation_angle_considered_motion(self):
        """
        Validate Higher Rotation angle is considered as motion
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1 and inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Validate SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GeThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode echoes the request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, "Test Loop over interesting values of Kosmos wheel emulator angle in[3..360]")
        # --------------------------------------------------------------------------------------------------------------
        for _ in []:  # TODO: fill this condition
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, "Set Kosmos wheel emulator direction to positive")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check no notification received in HID Queue.")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check thumbwheelEvent rotation>=0x0001 and <=7FFF")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, "Set Kosmos wheel emulator direction to negative")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check no notification received in HID Queue.")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check thumbwheelEvent rotation>=0x8001 and <=FFFF")
            # ----------------------------------------------------------------------------------------------------------
        # end for
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, "End Test Loop")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0003", _AUTHOR)
    # end def test_higher_rotation_angle_considered_motion

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_normal_mode_scroll_returns_hid_report(self):
        """
        Validate normal mode scroll returns HID notification
        
        [1] GetThumbwheelStatus() -> reporting mode, inv_dir, touch, proxy
        [2] SetThumbwheelReporting(reporting mode, inv_dir)
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode = 0 and inv_dir =1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode echoes the input")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Use Kosmos Wheel Emulator to Scroll RIGHT")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check AC_PAN field value in HID report is negative")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Use Kosmos Wheel Emulator to Scroll LEFT")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check AC_PAN field value in HID report is positive")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting with reporting_mode=0 and inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Validate SetThumbwheelReporting response fields where reporting_mode=0 and"
                                  "inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0004", _AUTHOR)
    # end def test_normal_mode_scroll_returns_hid_report

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_timestamp_between_consecutive_rotation_events(self):
        """
        Verify timestamp parameter between consecutive rotation events
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, "Test Loop over some interesting values [1ms..500ms]")
        # --------------------------------------------------------------------------------------------------------------
        for _ in []:  # TODO: fill this condition
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, "Use Kosmos Wheel emulator to scroll RIGHT in 2 steps with selected time delay")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check first thumbwheelEvent.time_stamp=0")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check next thumbwheelEvent.time_stamp=selected time delay(+/-1ms)")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "check no notification received for wheel rotation in HID Queue")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, "Use Kosmos Wheel emulator to scroll LEFT in 2 steps with selected time delay")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check first thumbwheelEvent.time_stamp=0")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check next thumbwheelEvent.time_stamp=selected time delay(+/-1ms)")
            # ----------------------------------------------------------------------------------------------------------

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "check no notification received for wheel rotation in HID Queue")
            # ----------------------------------------------------------------------------------------------------------
        # end for
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, "End Test Loop")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting with reporting_mode=0 and inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Validate SetThumbwheelReporting response fields where reporting_mode=0 and"
                                  "inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0005", _AUTHOR)
    # end def test_timestamp_between_consecutive_rotation_events

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_validate_touch_parameter_with_user_touch(self):
        """
        Validate Touch parameter during user touch
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Validate SetThumbwheelReporting response fields")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check GetThumbwheelStatus response reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate user touch on thumbwheel press")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check no notification received in HID queue")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "check first thumbwheelEvent.mask.touch = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate user touch on thumbwheel release")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check no notification received in HID queue")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "check next thumbwheelEvent.mask.touch = 0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting with reporting_mode=0 and inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Validate SetThumbwheelReporting response fields where reporting_mode=0 and"
                                  "inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0006", _AUTHOR)
    # end def test_validate_touch_parameter_with_user_touch

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_validate_touch_parameter_without_user_touch(self):
        """
        Check Touch parameter when the wheel is rotating but the user does not touch it anymore
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Verify SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check GetThumbwheelStatus fields reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate wheel rotation and set Kosmos.Wheel_emulator.touch_detected to release")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "check no notification received in HID Queue")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "check thumbwheelEvent.mask.touch = 0 and thumbwheelEvent.rotation_status=active")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting with reporting_mode=0 and inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Validate SetThumbwheelReporting response fields where reporting_mode=0 and"
                                  "inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0007", _AUTHOR)
    # end def test_validate_touch_parameter_without_user_touch

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_validate_touch_parameter_with_user_touch_wheel_idle(self):
        """
        Check touch parameter when used touches the wheel and stays idle
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Verify SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "set wheel emulator rotation to STILL and set emulator touch_detected to press")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check no notification received in HID queue")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "check thumbwheelEvent.mask.touch = 1 and thumbwheelEvent.rotation_status=inactive")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting with reporting_mode=0 and inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Validate SetThumbwheelReporting response fields where reporting_mode=0 and"
                                  "inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0008", _AUTHOR)
    # end def test_validate_touch_parameter_with_user_touch_wheel_idle

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_check_proxy_with_active_rotation(self):
        """
        Check proxy parameter with active rotation
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Verify SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check GetThumbwheelStatus response reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Use Kosmos to emulate wheel rotation and proximity detection")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check first event's thumbwheelEvent.rotation_status=start and"
                                  "thumbwheelEvent.mask.proxy = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check subsequent thumbwheelEvent.rotation_status=active and"
                                  "thumbwheelEvent.mask.proxy=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Use Kosmos to emulate wheel rotation but NO proximity detection")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check subsequent thumbwheelEvent.rotation_status=active and"
                                  "thumbwheelEvent.mask.proxy=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Use Kosmos to stop wheel rotation and NO proximity detection")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check the last event's thumbwheelEvent.rotation_status=inactive and"
                                  "thumbwheelEvent.mask.proxy=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting with reporting_mode=0 and inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Validate SetThumbwheelReporting response fields where reporting_mode=0 and"
                                  "inv_dir=0")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0009", _AUTHOR)
    # end def test_check_proxy_with_active_rotation

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_check_proxy_without_active_rotation(self):
        """
        Check proxy parameter without active rotation
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Verify SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check GetThumbwheelStatus response reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Use Kosmos to set proximity_detected = True and rotation angle =0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check the last event's thumbwheelEvent.rotation_status=inactive and"
                                  "thumbwheelEvent.mask.proxy=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Use Kosmos to set proximity_detected = False and rotation angle =0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check the last event's thumbwheelEvent.rotation_status=inactive and"
                                  "thumbwheelEvent.mask.proxy=0")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0010", _AUTHOR)
    # end def test_check_proxy_without_active_rotation

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_check_proxy_user_close_to_thumb_wheel(self):
        """
        Check proxy parameter when user close to the thumbwheel
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Verify SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate user proximity for thumbwheel")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.proxy=1")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0011", _AUTHOR)
    # end def test_check_proxy_user_close_to_thumb_wheel

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_check_single_tap(self):
        """
        Check single tap parameter during rotation and rotation inactive
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Verify SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Set Kosmos Kosmos.Wheel_emulator.touch_detected = Press_Release and Rotation between"
                                 "0..0xFF")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "check first thumbwheelEvent.mask.single_tap=1 and"
                                  "thumbwheelEvent.rotation_status=start")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "set thumb wheel rotation to STILL and Set Kosmos"
                                 "Kosmos.Wheel_emulator.touch_detected = Press_Release")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "check thumbwheelEvent.mask.single_tap=1 and"
                                  "thumbwheelEvent.rotation_status=inactive.")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0012", _AUTHOR)
    # end def test_check_single_tap

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_single_tap_transition_active_touch_inactive(self):
        """
        Check single tap parameter when user transitions from inactive to touch to inactive
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Verify SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate rotation of thumbwheel with angle between 1..360 and without"
                                 "Touch/proximity.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate single tap with gesture duration<300ms")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Set emulator wheel rotation angle=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=0")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0013", _AUTHOR)
    # end def test_single_tap_transition_active_touch_inactive

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_single_tap_transition_inactive_touch_proximity(self):
        """
        Check single tap parameter when user transitions from inactive to touch to proximity
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Verify SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate rotation of thumbwheel with angle between 1..360 and without"
                                 "Touch/proximity.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate single tap with gesture duration<300ms")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Set emulator wheel rotation angle=0 and proximity_detected=True")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.proxy = 1")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0014", _AUTHOR)
    # end def test_single_tap_transition_inactive_touch_proximity

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_single_tap_transition_proximity_touch_inactive(self):
        """
        Check single tap parameter when user transitions from proximity to touch to inactive
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Verify SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate rotation of thumbwheel with angle between 1..360 and proximity_detected=True")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.proxy=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate single tap with gesture duration<300ms")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.proxy=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Set emulator wheel rotation angle=0 and proximity_detected=False")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.proxy = 0")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0015", _AUTHOR)
    # end def test_single_tap_transition_proximity_touch_inactive

    @features("Feature2150")
    @level("Functionality")
    @skip("Under development")
    def test_single_tap_transition_proximity_touch_proximity(self):
        """
        Check single tap parameter when user transitions from proximity to touch to proximity
        """
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send SetThumbwheelReporting request with reporting_mode=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Verify SetThumbwheelReporting response fields.")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send GetThumbwheelStatus request")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check reporting_mode = 1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate rotation of thumbwheel with angle between 1..360 and proximity_detected=True")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.proxy=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Emulate single tap with gesture duration<300ms")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.proxy=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=1")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Set emulator wheel rotation angle=0 and proximity_detected=True")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.single_tap=0")
        # --------------------------------------------------------------------------------------------------------------

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check thumbwheelEvent.mask.proxy = 1")
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("FUN_2150_0016", _AUTHOR)
    # end def test_single_tap_transition_proximity_touch_proximity
# end class ThumbwheelFunctionalityTestCase

# ----------------------------------------------------------------------------------------------------------------------
# END OF FILE
# ----------------------------------------------------------------------------------------------------------------------
