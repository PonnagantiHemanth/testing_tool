#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
:package: codegenerator.input.templates
:brief: Templates which help in code generation
:author: Suresh Thiyagarajan <sthiyagarajan@logitech.com>
:date: 2021/05/24
"""


# ----------------------------------------------------------------------------------------------------------------------
# implementation
# ----------------------------------------------------------------------------------------------------------------------
class CommonTemplate(object):
    """
    Define text for all the templates which are common for all managers
    """
    PACKAGE_VALUE = None

    BRIEF_VALUE = None

    # Ex: Suresh Thiyagarajan <sthiyagarajan@logitech.com>
    AUTHOR_VALUE = "$AuthorName <$AuthorEmailId>"

    # Ex: 2021/05/24
    DATE_VALUE = "$Year/$Month/$Day"

    # Ex: from pytestbox.device.hidpp20.common.feature_0007.devicefriendlyname import DeviceFriendlyNameTestCase
    IMPORT_BASE_CLASS = "\nfrom pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower" \
                        ".$FeatureNameLowerCaseWithoutSpace import $FeatureNameTestCase"

    # Ex: from pytestbox.device.base.devicefriendlynameutils import DeviceFriendlyNameUtils
    IMPORT_UTIL_CLASS = "\nfrom pytestbox.$HidppType.base.$FeatureNameLowerCaseWithoutSpace$Utils import " \
                        "$FeatureNameUtils"

    # Ex: from pyhid.hidpp.features.common.devicefriendlyname import DeviceFriendlyName
    IMPORT_FEATURE_CLASS = "\nfrom pyhid.hidpp.features.$HidppCategory.$FeatureNameLowerCaseWithoutSpace import " \
                           "$FeatureNameTitleCaseWithoutSpace"

    # Ex: from pyhid.hidpp.features.common.devicefriendlyname import DeviceFriendlyName
    IMPORT_ITEM = "\nfrom pyhid.hidpp.features.$HidppCategory.$FeatureNameLowerCaseWithoutSpace import $Name"

    # Ex: Field = 0 (assignment) or Field=0 (parameter)
    NAME_VALUE_FORMAT = """$Space$Name$EqualTo$Value"""

    DOC_PARAM_TYPE = "\n$Space:param $NameLower: $Name\n$Space:type $NameLower: $Type"

    CLASS_STRUCTURE = """
# noinspection DuplicatedCode
# noinspection PyAttributeOutsideInit
class $TestCase($BaseTestCase):
    \"\"\"
    Validate ``$FeatureNameTitleCaseWithoutSpace`` $Type test cases
    \"\"\"
$Body
# end class $TestCase
"""

    SINGLE_TEST_CASE_ITEM = """
    $FeatureId
    @level("$Level")
    def $Name(self):
        \"\"\"$Synopsis
        \"\"\"$LogTypeAndText
        self.testCaseChecked("$Identifier", _AUTHOR)
    # end def $Name"""
# end class CommonTemplate


class UserInputTemplate(CommonTemplate):
    """
    Define text for all the templates for the file userinput.py
    """

    FILE_TEXT = """#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------------------------------------------------
# This code is auto generated by running ../source/spreadsheet.py on $DateValue
# ----------------------------------------------------------------------------------------------------------------------
from datetime import datetime
$ImportEvent
from codegenerator.input.engine import FunctionInfo
from codegenerator.input.engine import Parameter
from codegenerator.input.engine import Request
from codegenerator.input.engine import Response
from codegenerator.input.engine import SubParameter
from codegenerator.input.engine import TestCaseInfo


class UserInput(object):
    \"\"\"
    Generate ``UserInput`` from google drive Test Design Document.
    \"\"\"
    ARGS_OBJECT_REFERENCE = "$ObjectReference"$FeatureInfo$FunctionInfo$EventInfo$TestCaseInfo
# end class UserInput

# ----------------------------------------------------------------------------------------------------------------------
# END OF FILE
# ----------------------------------------------------------------------------------------------------------------------
"""

    FEATURE_INFO_TEXT = """
    $Key = $Value"""

    FEATURE_VALUE_TEXT = """$Quote$Value$Quote"""

    FUNCTION_INFO_TEXT = """
    FUNCTION_LIST = [$List
    ]"""

    EVENT_IMPORT = """
from codegenerator.input.engine import Event
from codegenerator.input.engine import EventInfo"""

    EVENT_INFO_TEXT = """\n
    EVENT_LIST = [$List
    ]"""

    FUNCTION_INFO_ITEM = """
        FunctionInfo(
            index=$Index,
            name=\"$Name\",
            nvs_backup_required=$NvsBackup,
            request=Request($Request
            ),
            response=Response($Response
            ),
            version_info=$VersionInfo
        )"""

    EVENT_INFO_ITEM = """
        EventInfo(
            index=$Index,
            name=\"$Name\",
            nvs_backup_required=$NvsBackup,
            event=Event($Event
            ),
            version_info=$VersionInfo
        )"""

    BASE_ITEM = """
                 base=\"$Base\","""

    REQ_RES_ITEM = """$Base
                 parameters=[$Parameters
                 ]"""

    TEST_CASE_INFO_TEXT = """\n
    TEST_CASES_INFO_BUSINESS = [$Business]
    TEST_CASES_INFO_ERROR_HANDLING = [$ErrorHandling]
    TEST_CASES_INFO_FUNCTIONALITY = [$Functionality]
    TEST_CASES_INFO_INTERFACE = [$Interface]
    TEST_CASES_INFO_ROBUSTNESS = [$Robustness]
    TEST_CASES_INFO_SECURITY = [$Security]
    TEST_CASES_INFO_PERFORMANCE = [$Performance]
    TEST_CASES_INFO_SETUP_SECTION = [$Setup]
    TEST_CASES_INFO_TEARDOWN_SECTION = [$Teardown]
    """

    TEST_CASE_INFO_ITEM = """
        TestCaseInfo(
            identifier=$Identifier,
            name=$Name,
            synopsis=$Synopsis,
            description=$Description)"""

    PARAMETER_ITEM = """
                    Parameter(
                        index=$Index, size=$Size, data_type="$Type", name="$Name",
                        comment=$Comment,
                        settings_data_type=$SettingsDataType,
                        settings_default_value=$SettingsDefaultValue,
                        prefix=$Prefix,
                        exclusion=$Exclusion,
                        default_value=$DefaultValue,
                        sub_parameters=[$SubParameters],
                        version_info=$VersionInfo)"""

    SUB_PARAMETER_ITEM = """
                                  SubParameter(
                                      index=$Index, size=$Size, data_type="$Type", name="$Name",
                                      comment=$Comment,
                                      settings_data_type=$SettingsDataType,
                                      settings_default_value=$SettingsDefaultValue,
                                      prefix=$Prefix,
                                      exclusion=$Exclusion,
                                      default_value=$DefaultValue,
                                      version_info=$VersionInfo)"""
# end class UserInputTemplate


class TestSuitesTemplate(CommonTemplate):
    """
    Define text for all the templates for the TestSuite operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007
    PACKAGE_TESTSUITES_INIT = "pytestbox.$Type.hidpp20.$HidppCategory.feature_$HidppFIDLowerLower"

    # Ex: brief: HID++ 2.0 feature ``0x0007`` test package
    BRIEF_TESTSUITES_INIT = "$HidppVersion feature ``0x$HidppFIDUpper`` test package"
# end class TestSuitesTemplate


class FeatureNameTemplate(CommonTemplate):
    """
    Define text for all the templates for the ``FeatureName`` operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007.devicefriendlyname
    PACKAGE_VALUE = "pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower." \
                    "$FeatureNameLowerCaseWithoutSpace"

    # Ex: brief: Validate HID++ 2.0 ``DeviceFriendlyName`` feature
    BRIEF_VALUE = "Validate $HidppVersion ``$FeatureNameTitleCaseWithoutSpace`` feature"

    GET_BACKUP = """\n
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_prerequisite(self, "Backup initial NVS")
        # --------------------------------------------------------------------------------------------------------------
        DeviceTestUtils.NvsHelper.backup_nvs(self)"""

    GET_RESTORE = """
        with self.manage_post_requisite():
            if self.post_requisite_reload_nvs:
                # ------------------------------------------------------------------------------------------------------
                LogHelper.log_post_requisite(self, "Reload initial NVS")
                # ------------------------------------------------------------------------------------------------------
                DeviceTestUtils.NvsHelper.restore_nvs(self)
                self.post_requisite_reload_nvs = False
            # end if
        # end with"""

    GET_TEARDOWN = """\n
    def tearDown(self):
        \"\"\"
        Handle test post-requisites
        \"\"\"$PostRequisites$Restore
        super().tearDown()
    # end def tearDown"""

    ACTIVATE_FEATURES = """\n
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_prerequisite(self, "Activate features")
        # --------------------------------------------------------------------------------------------------------------
        DeviceTestUtils.HIDppHelper.activate_features(self$Manufacturing$Compliance$Gotthard)"""

    CLASS_STRUCTURE = """
# noinspection DuplicatedCode
# noinspection PyAttributeOutsideInit
class $FeatureNameTestCase(DeviceBaseTestCase):
    \"\"\"
    Validate ``$FeatureNameTitleCaseWithoutSpace`` TestCases in Application mode
    \"\"\"

    def setUp(self):
        \"\"\"
        Handle test prerequisites
        \"\"\"
        # Start with super setUp()
        super().setUp()$Backup$SetupSection$EnableHiddenFeatures

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_prerequisite(self, "Get feature 0x$FIDUpper index")
        # --------------------------------------------------------------------------------------------------------------
        self.feature_$FIDLower$Index, self.feature_$FIDLower, _, _ = $Utils.HIDppHelper.get_parameters(
            test_case=self)

        self.config = self.f.PRODUCT.FEATURES.$HidppCategoryUpper.$FeatureNameUpperCaseWithUnderscore
    # end def setUp$TeardownSection
# end class $FeatureNameTestCase
"""
# end class FeatureNameTemplate


class SecurityTemplate(CommonTemplate):
    """
    Define text for all the templates for the ``Security`` operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007.security
    PACKAGE_VALUE = "pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower.security"

    # Ex: brief: HID++ 2.0 ``DeviceFriendlyName`` security test suite
    BRIEF_VALUE = "$HidppVersion ``$FeatureNameTitleCaseWithoutSpace`` security test suite"
# end class SecurityTemplate


class BusinessTemplate(CommonTemplate):
    """
    Define text for all the templates for the ``Business`` operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007.business
    PACKAGE_VALUE = "pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower.business"

    # Ex: brief: HID++ 2.0 ``DeviceFriendlyName`` business test suite
    BRIEF_VALUE = "$HidppVersion ``$FeatureNameTitleCaseWithoutSpace`` business test suite"
# end class BusinessTemplate


class ErrorHandlingTemplate(CommonTemplate):
    """
    Define text for all the templates for the ``ErrorHandling`` operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007.errorhandling
    PACKAGE_VALUE = "pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower.errorhandling"

    # Ex: brief: HID++ 2.0 ``DeviceFriendlyName`` error handling test suite
    BRIEF_VALUE = "$HidppVersion ``$FeatureNameTitleCaseWithoutSpace`` error handling test suite"

    GET_WRONG_FUNCTION_INDEX = """
    @features("Feature$FIDUpper")
    @level("ErrorHandling")
    def test_wrong_function_index(self):
        \"\"\"
        Validate function index
        \"\"\"$MinValue
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, _LOOP_START_FID)
        # --------------------------------------------------------------------------------------------------------------
        for function_index in \
compute_wrong_range(value=list(range(self.feature_$FIDLower.get_max_function_index() + 1)),
                                                  max_value=0xF):
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, f"Send $FunctionName request with a wrong function index: {function_index}")
            # ----------------------------------------------------------------------------------------------------------
            $FeatureNameTitleCaseWithoutSpace$Request$ParamsKeyValue)
        # end for
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, _LOOP_END)
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("ERR_$FIDUpper$Number", _AUTHOR)
    # end def test_wrong_function_index"""
# end class ErrorHandlingTemplate


class FunctionalityTemplate(CommonTemplate):
    """
    Define text for all the templates for the ``Functionality`` operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007.functionality
    PACKAGE_VALUE = "pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower.functionality"

    # Ex: brief: HID++ 2.0 ``DeviceFriendlyName`` functionality test suite
    BRIEF_VALUE = "$HidppVersion ``$FeatureNameTitleCaseWithoutSpace`` functionality test suite"
# end class FunctionalityTemplate


class PerformanceTemplate(CommonTemplate):
    """
    Define text for all the templates for the ``Performance`` operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007.performance
    PACKAGE_VALUE = "pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower.performance"

    # Ex: brief: HID++ 2.0 ``DeviceFriendlyName`` performance test suite
    BRIEF_VALUE = "$HidppVersion ``$FeatureNameTitleCaseWithoutSpace`` performance test suite"
# end class PerformanceTemplate


class InterfaceTemplate(CommonTemplate):
    """
    Define text for all the templates for the ``Interface`` operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007.interface
    PACKAGE_VALUE = "pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower.interface"

    # Ex: brief: HID++ 2.0 ``DeviceFriendlyName`` interface test suite
    BRIEF_VALUE = "$HidppVersion ``$FeatureNameTitleCaseWithoutSpace`` interface test suite"

    CHECK_MAP = """
            "$Field1": (checker.check_$Field2, $Field3)"""

    GET_INTERFACE = """
    @features("Feature$FIDUpper$VersionNo")
    @level("Interface")
    def test_$FunctionLower$Ext(self):
        \"\"\"
        Validate ``$FunctionName$Version`` normal processing$SingleItem
        \"\"\"$BackupNvs$MinValue
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_step(self, "Send $FunctionName$Version request")
        # --------------------------------------------------------------------------------------------------------------
        response = $FeatureNameTitleCaseWithoutSpace$Request$ParamsKeyValue)

        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_check(self, "Check $FunctionName$Response$Version fields")
        # --------------------------------------------------------------------------------------------------------------
        $CheckMapAndFields

        self.testCaseChecked("INT_$FIDUpper$Number", _AUTHOR)
    # end def test_$FunctionLower$Ext"""
# end class InterfaceTemplate


class RobustnessTemplate(CommonTemplate):
    """
    Define text for all the templates for the ``Robustness`` operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007.robustness
    PACKAGE_VALUE = "pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower.robustness"

    # Ex: brief: HID++ 2.0 ``DeviceFriendlyName`` robustness test suite
    BRIEF_VALUE = "$HidppVersion ``$FeatureNameTitleCaseWithoutSpace`` robustness test suite"

    CHECK_MAP = """
                "$Field1": (checker.check_$Field2, $Field3)"""

    GET_SOFTWARE_ID = """
    @features("Feature$FIDUpper$VersionNo")
    @level("Robustness")
    def test_$FunctionLower$Ext(self):
        \"\"\"
        Validate ``$FunctionName$Version`` software id field is ignored by the firmware$SingleItem

        $RequestFormat

        $SoftwareId
        \"\"\"$BackupNvs$MinValue
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, _LOOP_START_SW_ID)
        # --------------------------------------------------------------------------------------------------------------
        for software_id in compute_inf_values($FeatureNameTitleCaseWithoutSpace.DEFAULT.SOFTWARE_ID)$SoftwareIdRange:
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, f"Send $FunctionName$Version request with software_id: {software_id}")
            # ----------------------------------------------------------------------------------------------------------
            response = $FeatureNameTitleCaseWithoutSpace$Request$ParamsKeyValue)

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check $FunctionName$Response$Version fields")
            # ----------------------------------------------------------------------------------------------------------
            $CheckMapAndFields
        # end for
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, _LOOP_END)
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("ROB_$FIDUpper$Number", _AUTHOR)
    # end def test_$FunctionLower$Ext"""

    GET_CHECK_FIELDS = """    check_map = {
                "device_index": (checker.check_device_index, report.device_index),
                "feature_index": (checker.check_feature_index, report.feature_index),
            }"""

    GET_PADDING = """
    @features("Feature$FIDUpper$VersionNo")
    @level("Robustness")
    def test_$FunctionLower$Ext(self):
        \"\"\"
        Validate ``$FunctionName$Version`` padding bytes are ignored by the firmware$SingleItem

        $RequestFormat

        Padding (PP) boundary values [00..FF]
        \"\"\"$BackupNvs$MinValue
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, _LOOP_START_PADDING)
        # --------------------------------------------------------------------------------------------------------------
        request_cls = self.feature_$FIDLower.$FunctionLower$ReqCls
        for padding in compute_sup_values(HexList(Numeral(request_cls.DEFAULT.PADDING, request_cls.LEN.PADDING // 8))):
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, f"Send $FunctionName$Version request with padding: {padding}")
            # ----------------------------------------------------------------------------------------------------------
            response = $FeatureNameTitleCaseWithoutSpace$Request$ParamsKeyValue)

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check $FunctionName$Response$Version fields")
            # ----------------------------------------------------------------------------------------------------------
            $CheckMapAndFields
        # end for
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, _LOOP_END)
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("ROB_$FIDUpper$Number", _AUTHOR)
    # end def test_$FunctionLower$Ext"""

    GET_RESERVED = """
    @features("Feature$FIDUpper$VersionNo")
    @level("Robustness")
    def test_$FunctionLower$Ext(self):
        \"\"\"
        Validate ``$FunctionName$Version`` reserved bytes are ignored by the firmware$SingleItem
        \"\"\"$BackupNvs$MinValue
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, _LOOP_START_RESERVED)
        # --------------------------------------------------------------------------------------------------------------
        request_cls = self.feature_$FIDLower.$FunctionLower$ReqCls
        for reserved in compute_wrong_range(0, max_value=(1 << request_cls.LEN.RESERVED) - 1):
            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_step(self, f"Send $FunctionName$Version request with reserved: {reserved}")
            # ----------------------------------------------------------------------------------------------------------
            response = $FeatureNameTitleCaseWithoutSpace$Request$ParamsKeyValue)

            # ----------------------------------------------------------------------------------------------------------
            LogHelper.log_check(self, "Check $FunctionName$Response$Version fields")
            # ----------------------------------------------------------------------------------------------------------
            $CheckMapAndFields
        # end for
        # --------------------------------------------------------------------------------------------------------------
        LogHelper.log_info(self, _LOOP_END)
        # --------------------------------------------------------------------------------------------------------------

        self.testCaseChecked("ROB_$FIDUpper$Number", _AUTHOR)
    # end def test_$FunctionLower$Ext"""
# end class RobustnessTemplate


class SettingsTemplate(CommonTemplate):
    """
    Define text for all the templates for the Settings/Configuration values
    """

    GET_SETTINGS = """
# TODO: copy/paste the below configuration in the respective settings.ini file (insert at feature id alphabetical order)

# Feature 0x$HidppFIDUpper version $MaxVersion
[PRODUCT/FEATURES/$HidppCategoryUpper/$FeatureNameUpperCaseWithUnderscore]
Enabled = True$VersionInfo$FieldInfo
"""
# end class SettingsTemplate


class HidDispatcherTemplate(CommonTemplate):
    """
    Define text for all the templates for HidDispatcher registration
    """

    GET_EVENT_QUEUE = """
        # HID++ Event messages
        accepted_messages = (
            # 0x$HidppFIDUpper $FeatureNameTitleCaseWithSpace
            $FeatureNameTitleCaseWithoutSpace$Model.get_available_events_classes() +
        )"""

    GET_RESPONSE_QUEUE = """
        # TODO: Please copy the below code & paste between the right numbers (ascending order)
        # HID++ $HidppCategoryCapitalized messages
        accepted_messages = (
            # 0x$HidppFIDUpper $FeatureNameTitleCaseWithSpace
            $FeatureNameTitleCaseWithoutSpace$Model.get_available_responses_classes() +
        )"""

    GET_FEATURE_TABLE = """
        # TODO: Please copy the below code & paste between the right numbers (ascending order)
        self._feature_table = {
            # 0x$HidppFIDUpper $FeatureNameTitleCaseWithSpace
            **$FeatureNameTitleCaseWithoutSpace$Model.get_available_responses_map(),
        }"""

    GET_EVENT_TABLE = """
        self._event_table = {
            # 0x$HidppFIDUpper $FeatureNameTitleCaseWithSpace
            **$FeatureNameTitleCaseWithoutSpace$Model.get_available_events_map(),
        }"""

    GET_INIT_FUNCTION = """
    def __init__(self):$FeatureTable$EventTable
    # end def __init__"""

    GET_INIT_FEATURE_MESSAGE_QUEUES = """
    def init_feature_message_queues(self):$ResponseQueue$EventQueue
    # end def init_feature_message_queues"""

    GET_HID_DISPATCHER = """# This file already exist in the system with all the features.

class HIDDispatcher(object):
$InitFunction
$InitFeatureMessageQueues
# end class HIDDispatcher
"""
# end class HidDispatcherTemplate


class RegistrationTemplate(CommonTemplate):
    """
    Define text for all the templates for the Registration section
    """

    SINGLE_VERSION_TEXT = """function = lambda context: (
    check_feature(context, 'PRODUCT/FEATURES/$CategoryUpper/$NameUpperCaseWithUnderscore', 'F_Enabled') and
    check_feature(context, 'PRODUCT/FEATURES/$CategoryUpper/$NameUpperCaseWithUnderscore', 'F_Version_$No'))
features.registerFeature('Feature$FIDUpper$V$No', function, featureHelp='Help for $NameTitleCaseWithSpace $V$No')"""

    GET_REGISTRATION = """# This file already exist in the system with all the features registered.
# TODO: Please copy the below code & paste between the right numbers (ascending order)

# $FeatureNameTitleCaseWithSpace
function = lambda context: (
    check_feature(context, 'PRODUCT/FEATURES/$HidppCategoryUpper/$FeatureNameUpperCaseWithUnderscore', 'F_Enabled'))
features.registerFeature('Feature$HidppFIDUpper', function, featureHelp='Help for $FeatureNameTitleCaseWithSpace')
$VersionInfo
"""
# end class RegistrationTemplate


class SubSystemTemplate(CommonTemplate):
    """
    Define text for all the templates for the SubSystem features
    """

    GET_SUB_SYSTEM = """# This file already exist in the system with all the features.

from pyharness.systems import AbstractSubSystem


class ProductSubSystem(AbstractSubSystem):
    class FeaturesSubSystem(AbstractSubSystem):
        class $FeaturesSubSystem(AbstractSubSystem):
            def __init__(self):
                # TODO: Please copy the below code & paste between the right numbers (ascending order)
                # 0x$HidppFIDUpper $FeatureNameTitleCaseWithSpace
                self.$FeatureNameUpperCaseWithUnderscore = self.$FeatureNameTitleCaseWithoutSpace$SubSystem()
            # end def __init

            # TODO: Please copy the below code & paste between the right numbers (ascending order)
            class $FeatureNameTitleCaseWithoutSpace$SubSystem(AbstractSubSystem):
                \"\"\"
                Enable/Disable Feature 0x$HidppFIDUpper ($FeatureNameTitleCaseWithSpace) SubSystem
                \"\"\"

                def __init__(self):
                    AbstractSubSystem.__init__(self, "$FeatureNameUpperCaseWithUnderscore")

                    # $FeatureNameTitleCaseWithoutSpace feature
                    self.F_Enabled = False

                    # Supported version$VersionInfo$FieldInfo
                # end def __init__
            # end class $FeatureNameTitleCaseWithoutSpace$SubSystem
"""
# end class SubSystemTemplate


class TestRunnerTemplate(CommonTemplate):
    """
    Define text for all the templates for the ``TestRunner`` operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007.testrunner
    PACKAGE_VALUE = "pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower.testrunner"

    # Ex: brief: HID++ 2.0 feature 0x0007 testrunner implementation
    BRIEF_VALUE = "$HidppVersion feature 0x$HidppFIDLower testrunner implementation"

    TEST_RUNNER_CLASS = """
class $HidppTypeTitleCase$HidppN$FeatureTestSuite(PyHarnessSuite):
    \"\"\"
    Define test runner suite for $HidppCategory feature 0x$HidppFIDUpper tests
    \"\"\"

    def runTests(self, result, context):
        \"\"\"
        Run all the tests in the test suite.
        
        :param result: The test result that will collect the results.
        :type result: ``TestResult``
        :param context: The context in which the tests are run.
        :type context: ``Context`
        \"\"\"$RunTest
    # end def runTests
# end class $HidppTypeTitleCase$HidppN$FeatureTestSuite
"""
# end class TestRunnerTemplate


class InitTemplate(CommonTemplate):
    """
    Define text for all the templates for the ``__init__.py`` operations
    """

    # Ex: package: pytestbox.device.hidpp20.common.feature_0007
    PACKAGE_VALUE = "pytestbox.$HidppType.hidpp20.$HidppCategory.feature_$HidppFIDLower"

    # Ex: brief: Device HID++ 2.0 Common Package
    BRIEF_VALUE = "$HidppTypeTitleCase $HidppVersion feature 0x$HidppFIDLower test package"
# end class InitTemplate


class UtilsTemplate(CommonTemplate):
    """
    Define text for all the templates for the Utils operations
    """

    # Ex: pytestbox.device.base.devicefriendlynameutils
    PACKAGE_VALUE = "pytestbox.$HidppType.base.$FeatureNameLowerCaseWithoutSpace$Utils"

    # Ex: Helpers for ``DeviceFriendlyName`` feature
    BRIEF_VALUE = "Helpers for ``$FeatureNameTitleCaseWithoutSpace`` feature"

    UTILS_BASE = """
class $FeatureNameTitleCaseWithoutSpace$TestUtils(DeviceBaseTestUtils):
    \"\"\"
    Provide helpers for common checks on ``$FeatureNameTitleCaseWithoutSpace`` feature
    \"\"\"
$Helpers
# end class $FeatureNameTitleCaseWithoutSpace$TestUtils
"""

    CLASS_MESSAGE_CHECKER = """
    class $FunctionName$Ext(DeviceBaseTestUtils.MessageChecker):
        \"\"\"
        Define Helper to check ``$FunctionName``
        \"\"\"
$DefaultCheckMap
    # end class $FunctionName$Ext
"""

    CLASS_HIDPP_HELPER = """    class HIDppHelper(DeviceBaseTestUtils.HIDppHelper):
        # See ``DeviceBaseTestUtils.HIDppHelper``

        @classmethod
        def get_parameters(cls, test_case,
                           feature_id=$FeatureName.FEATURE_ID,
                           factory=$FeatureNameFactory,
                           device_index=None, port_index=None, update_test_case=None, skip_not_found=False):
            # See ``DeviceBaseTestUtils.HIDppHelper.get_parameters``
            return super().get_parameters(
                test_case, feature_id, factory, device_index, port_index, update_test_case, skip_not_found)
        # end def get_parameters\n$HidppFunction$HidppEvent
    # end class HIDppHelper"""

    GET_DEFAULT_CHECK_MAP = """
        @classmethod
        def get_default_check_map(cls, test_case):
            \"\"\"
            Get the default check methods and expected values

            :param test_case: Current test case
            :type test_case: ``$CommonBaseTestCase``

            :return: Default check map
            :rtype: ``dict``$ErrorDoc
            \"\"\"$Config$ReturnValues$ErrorText
        # end def get_default_check_map"""

    GET_DEFAULT_CHECK_MAP_SINGLE_LINE = """\n$Space"$FieldLowerCase": (cls.check_$FieldLowerCase, $Data)"""

    GET_DEFAULT_CHECK_MAP_DOUBLE_LINE_1 = """\n$Space"$FieldLowerCase": ("""
    GET_DEFAULT_CHECK_MAP_DOUBLE_LINE_2 = """$Space    cls.check_$FieldLowerCase, $Data)"""

    GET_DEFAULT_CHECK_MAP_TRIPLE_LINE = """\n$Space"$FieldLowerCase": (
$Space    cls.check_$FieldLowerCase,
$Space    $Data)"""

    GET_CHECK_MAP_FUNCTION = """\n
        @staticmethod
        def check_$FieldLowerCase(test_case, $Response, expected):
            \"\"\"
            Check $FieldLowerCase field in $Response

            :param test_case: Current test case
            :type test_case: ``$CommonBaseTestCase``
            :param $Response: $FunctionName to check
            :type $Response: ``$ResponseName``
            :param expected: Expected value
            :type expected: $FieldDataType

            :raise ``AssertionError``: Assert $FieldLowerCase that raise an exception
            \"\"\"
            test_case.assertNotNone(
                expected,
                msg="The $FieldLowerCase shall be (a) defined in the DUT settings (b) passed as an argument")
            test_case.assertEqual(
                expected=$Expected
                obtained=$Obtained
                msg="The $FieldLowerCase parameter differs from the one expected")
        # end def check_$FieldLowerCase"""

    GET_SUB_LEVEL_SINGLE_ITEM = """$Space$Utils.$Checker.check_fields(
$Space    test_case, message.$FieldLowerCase, $ClassName.$MaskBitMap, expected)"""

    GET_CHECK_MAP_FUNCTION_SUB_LEVEL = """\n
        @staticmethod
        def check_$FieldLowerCase(test_case, message, expected):
            \"\"\"
            Check ``$FieldLowerCase``

            :param test_case: Current test case
            :type test_case: ``$CommonBaseTestCase``
            :param message: $FunctionName to check
            :type message: ``$ResponseName``
            :param expected: Expected value
            :type expected: $FieldDataType
            \"\"\"$VersionConfig$Items
        # end def check_$FieldLowerCase"""

    GET_HIDPP_FUNCTION_PADDING_DOC = """
            :param padding: Padding - OPTIONAL
            :type padding: ``int | None``"""

    GET_HIDPP_FUNCTION_RESERVED_DOC = """
            :param reserved: Reserved - OPTIONAL
            :type reserved: ``int | None``"""

    GET_HIDPP_FUNCTION_PADDING_CODE = """\n
            if padding is not None:
                report.padding = padding
            # end if"""

    GET_HIDPP_FUNCTION_RESERVED_CODE = """\n
            if reserved is not None:
                report.reserved = reserved
            # end if"""

    GET_HIDPP_FUNCTION = """
        @classmethod
        def $FunctionLower($Params):
            \"\"\"
            Process ``$FunctionName``

            :param test_case: Current test case
            :type test_case: ``$CommonBaseTestCase``$ParamsDoc
            :param device_index: Device index - OPTIONAL
            :type device_index: ``int | None``
            :param port_index: Port index - OPTIONAL
            :type port_index: ``int | None``
            :param software_id: Software identifier - OPTIONAL
            :type software_id: ``int | None``$PaddingParamsDoc$ReservedParamsDoc

            :return: $FunctionName$Response
            :rtype: ``$ResponseName``
            \"\"\"
            feature_$FIDLower$Index, feature_$FIDLower, device_index, _ = cls.get_parameters(
                test_case, device_index=device_index, port_index=port_index)

            report = feature_$FIDLower.$FunctionLower$ReqCls(
                device_index=device_index,
                feature_index=feature_$FIDLower$Index$ParamsKeyValue)

            if software_id is not None:
                report.software_id = software_id
            # end if$PaddingCode$ReservedCode

            return ChannelUtils.send(
                test_case=test_case,
                report=report,
                response_queue_name=HIDDispatcher.QueueName.$Queue,
                response_class_type=feature_$FIDLower.$FunctionLower$ResCls)
        # end def $FunctionLower"""

    GET_HIDPP_FUNCTION_WITH_ERROR_CASE = """
        @classmethod
        def $FunctionLower$Suffix($Params):
            \"\"\"
            Process ``$FunctionName``

            :param test_case: Current test case
            :type test_case: ``$CommonBaseTestCase``
            :param error_codes: Error codes
            :type error_codes: ``list[int]``$ParamsDoc
            :param function_index: Function index - OPTIONAL
            :type function_index: ``int | None``
            :param device_index: Device index - OPTIONAL
            :type device_index: ``int | None``
            :param port_index: Port index - OPTIONAL
            :type port_index: ``int | None``
            \"\"\"
            feature_$FIDLower$Index, feature_$FIDLower, device_index, _ = cls.get_parameters(
                test_case, device_index=device_index, port_index=port_index)

            report = feature_$FIDLower.$FunctionLower$ReqCls(
                device_index=device_index,
                feature_index=feature_$FIDLower$Index$ParamsKeyValue)

            if function_index is not None:
                report.function_index = function_index
            # end if

            cls.send_report_wait_error(test_case=test_case, report=report, error_codes=error_codes)
        # end def $FunctionLower$Suffix"""

    GET_HIDPP_EVENT = """\n
        @classmethod
        def $FunctionLower(
                cls, test_case, timeout=BaseCommunicationChannel.GENERIC_GET_TIMEOUT,
                check_first_message=True, allow_no_message=False, skip_error_message=False):
            \"\"\"
            Process ``$FunctionName``: get notification from event queue

            :param test_case: Current test case
            :type test_case: ``$CommonBaseTestCase``
            :param timeout: Time to wait for message before raising exception in seconds (0 disable it) - OPTIONAL
            :type timeout: ``float``
            :param check_first_message: Flag to check on the first received message - OPTIONAL
            :type check_first_message: ``bool``
            :param allow_no_message: Flag to raise exception when the requested message in not received - OPTIONAL
            :type allow_no_message: ``bool``
            :param skip_error_message: Flag to skip error catching mechanism - OPTIONAL
            :type skip_error_message: ``bool``

            :return: $FunctionName
            :rtype: ``$FunctionName``
            \"\"\"
            _, feature_$FIDLower, _, _ = cls.get_parameters(test_case)

            return ChannelUtils.get_only(
                test_case=test_case,
                queue_name=HIDDispatcher.QueueName.EVENT,
                class_type=feature_$FIDLower.$FunctionLower$ReqCls,
                timeout=timeout,
                check_first_message=check_first_message,
                allow_no_message=allow_no_message,
                skip_error_message=skip_error_message)
        # end def $FunctionLower"""
# end class UtilsTemplate


class FeatureTestTemplate(CommonTemplate):
    """
    Define text for all the templates for the FeatureTestManger operations
    """

    # Ex: pyhid.hidpp.features.common.test.devicefriendlyname_test
    PACKAGE_VALUE = "pyhid.hidpp.features.$HidppCategory.test.$FeatureNameLowerCaseWithoutSpace$TestWithUnderscore"

    # Ex: HID++ 2.0 ``DeviceFriendlyName`` command test definition
    BRIEF_VALUE = "$HidppVersion ``$FeatureNameTitleCaseWithoutSpace`` test module"

    NAME_VALUE_STRUCTURE = """\n                    "$LeftSideValue": $RightSideValue,"""

    API_TEST_STRUCTURE = """\n
    @staticmethod
    def test_$FunctionNameLower():
        \"\"\"
        Test ``$FunctionName`` class instantiation
        \"\"\"
        my_class = $FunctionName(device_index=0, feature_index=0$ParamsMinValue)

        RootTestCase.$ReportIdType(my_class)

        my_class = $FunctionName(device_index=0xFF, feature_index=0xFF$ParamsMaxValue)

        RootTestCase.$ReportIdType(my_class)
    # end def test_$FunctionNameLower"""

    INSTANTIATION_TEST_CASE = """
class $FeatureNameTitleCaseWithoutSpace$InstantiationTestCase(TestCase):
    \"\"\"
    Test ``$FeatureNameTitleCaseWithoutSpace`` testing classes instantiations
    \"\"\"

    @staticmethod
    def test_$FeatureNameLowerCaseWithUnderscore():
        \"\"\"
        Test ``$FeatureNameTitleCaseWithoutSpace`` class instantiation
        \"\"\"
        my_class = $FeatureNameTitleCaseWithoutSpace(device_index=0, feature_index=0)

        RootTestCase._top_level_class_checker(my_class)

        my_class = $FeatureNameTitleCaseWithoutSpace(device_index=0xFF, feature_index=0xFF)

        RootTestCase._top_level_class_checker(my_class)
    # end def test_$FeatureNameLowerCaseWithUnderscore$ApiStructure
# end class $FeatureNameTitleCaseWithoutSpace$InstantiationTestCase
"""

    FEATURE_VERSION_INFO = """
            $FeatureNameTitleCaseWithoutSpace$Version.VERSION: {
                "cls": $FeatureNameTitleCaseWithoutSpace$Version,
                "interfaces": {$InterfaceValues
                },
                "max_function_index": $MaxFunctionIndex
            },"""

    FEATURE_TEST_CASE = """\n
class $FeatureNameTitleCaseWithoutSpace$TestCase(TestCase):
    \"\"\"
    Test ``$FeatureNameTitleCaseWithoutSpace`` factory feature
    \"\"\"

    @classmethod
    def setUpClass(cls):
        \"\"\"
        Handle class prerequisites
        \"\"\"
        cls.expected = {$VersionInfo
        }
        cls.max_version = $MaxVersion
    # end def setUpClass

    def test_factory(self):
        \"\"\"
        Test ``$FeatureNameFactory``

        :raise ``AssertionError``: Assert class type that raise an exception
        \"\"\"
        for version, expected in self.expected.items():
            self.assertEqual(type($FeatureNameFactory.create(version)), expected["cls"])
        # end for
    # end def test_factory

    def test_factory_version_out_of_range(self):
        \"\"\"
        Test ``$FeatureNameFactory`` using out of range versions

        :raise ``AssertionError``: Assert creation of class that raise an exception
        \"\"\"
        for version in [self.max_version + 1, self.max_version + 2]:
            with self.assertRaises(KeyError):
                $FeatureNameFactory.create(version)
            # end with
        # end for
    # end def test_factory_version_out_of_range

    def test_factory_interfaces(self):
        \"\"\"
        Check ``$FeatureNameFactory`` returns expected interfaces

        :raise ``AssertionError``: Assert get attribute that raise an exception
        \"\"\"
        for version, cls_map in self.expected.items():
            obj = $FeatureNameFactory.create(version)
            for interface, interface_cls in cls_map["interfaces"].items():
                if interface_cls:
                    self.assertEqual(getattr(obj, interface), interface_cls)
                else:
                    with self.assertRaises(NotImplementedError):
                        getattr(obj, interface)
                    # end with
                # end if
            # end for
        # end for
    # end def test_factory_interfaces

    def test_get_max_function_index(self):
        \"\"\"
        Check ``get_max_function_index`` returns correct value at each version

        :raise ``AssertionError``: Assert max_function_index that raise an exception
        \"\"\"
        for version, expected in self.expected.items():
            obj = $FeatureNameFactory.create(version)
            self.assertEqual(obj.get_max_function_index(), expected["max_function_index"])
        # end for
    # end def test_get_max_function_index
# end class $FeatureNameTitleCaseWithoutSpace$TestCase
"""
# end class FeatureTestTemplate


class FeatureTemplate(CommonTemplate):
    """
    Define text for all the templates for the FeatureManger operations
    """

    # Ex: pyhid.hidpp.features.common.devicefriendlyname
    PACKAGE_VALUE = "pyhid.hidpp.features.$HidppCategory.$FeatureNameLowerCaseWithoutSpace"

    # Ex: HID++ 2.0 ``DeviceFriendlyName`` command interface definition
    BRIEF_VALUE = "$HidppVersion ``$FeatureNameTitleCaseWithoutSpace`` command interface definition"

    FEATURE_BASE = """
class $FeatureNameTitleCaseWithoutSpace(HidppMessage):
    # Note: (Developer/Reviewer) Class level comment may not start with assertive verb.
    # TODO: (Developer/Reviewer) Verify the multiline comment follows 'Line Blocks' section from url
    # https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#toc-entry-24
    \"\"\"$HidppFeatureComment
    \"\"\"
    FEATURE_ID = 0x$HidppFIDUpper
    $MaxFunctionIndex

    def __init__(self, device_index, feature_index, **kwargs):
        \"\"\"
        :param device_index: Device index
        :type device_index: ``int | HexList``
        :param feature_index: Feature index
        :type feature_index: ``int | HexList``
        :param kwargs: Potential future parameters
        :type kwargs: ``object``
        \"\"\"
        super().__init__(device_index=device_index, feature_index=feature_index, **kwargs)
    # end def __init__$SubClass
# end class $FeatureNameTitleCaseWithoutSpace
"""

    FUNCTION_VALUES = """
            "functions": {$Values
            }"""

    EVENT_VALUES = """,
            "events": {$Values
            }"""

    FUNCTION_MAP_VERSION = """
        function_map$FunctionMapVersion = {$FunctionValues$EventValues
        }\n"""

    FEATURE_VERSION_ITEM = """
                $FeatureNameTitleCaseWithoutSpace$V$HidppFeatureVersion.VERSION: {
                    "main_cls": $FeatureNameTitleCaseWithoutSpace$V$HidppFeatureVersion,
                    "api": function_map$FunctionMapVersion
                }"""

    FEATURE_MODEL = """\n
# noinspection DuplicatedCode
class $FeatureNameTitleCaseWithoutSpace$Model(FeatureModel):
    \"\"\"
    Define ``$FeatureNameTitleCaseWithoutSpace`` feature model
    \"\"\"

    class INDEX(object):
        \"\"\"
        Define Function/Event index
        \"\"\"
        $FunctionIndexValues$EventIndexValues
    # end class INDEX

    @classmethod
    def _get_data_model(cls):
        \"\"\"
        Get ``$FeatureNameTitleCaseWithoutSpace`` feature data model

        :return: Data model
        :rtype: ``dict``
        \"\"\"$FunctionMapVersions
        return {
            "feature_base": $FeatureNameTitleCaseWithoutSpace,
            "versions": {$FeatureVersionInfo
            }
        }
    # end def _get_data_model
# end class $FeatureNameTitleCaseWithoutSpace$Model
"""

    FEATURE_FACTORY = """\n
class $FeatureNameFactory(FeatureFactory):
    \"\"\"
    Get ``$FeatureNameTitleCaseWithoutSpace`` object from a given version
    \"\"\"

    @staticmethod
    def create(version):
        \"\"\"
        Create ``$FeatureNameTitleCaseWithoutSpace`` object from given version number

        :param version: Feature version
        :type version: ``int``

        :return: Feature object
        :rtype: ``$FeatureNameTitleCaseWithoutSpace$Interface``
        \"\"\"
        return $FeatureNameTitleCaseWithoutSpace$Model.get_main_cls(version)()
    # end def create
# end class $FeatureNameFactory
"""

    FEATURE_INTERFACE = """\n
class $FeatureNameTitleCaseWithoutSpace$Interface(FeatureInterface, ABC):
    \"\"\"
    Define required interfaces for ``$FeatureNameTitleCaseWithoutSpace``
    \"\"\"

    def __init__(self):
        # Requests$ReqComment

        # Responses$ResComment$EventComment
    # end def __init__
# end class $FeatureNameTitleCaseWithoutSpace$Interface
"""

    FEATURE_CLASS = """$FeatureClassInfo"""

    FEATURE_CLASS_INIT_SECTION = """\n
    def __init__(self):
        # See ``$FeatureNameTitleCaseWithoutSpace.__init__``
        super().__init__()
        index = $FeatureNameTitleCaseWithoutSpace$Model.INDEX

        # Requests$ReqValue

        # Responses$ResValue$EventValue
    # end def __init__"""

    FEATURE_CLASS_MAX_INDEX_SECTION = """\n
    # noinspection PyMethodMayBeStatic
    def get_max_function_index(self):
        # See ``$FeatureNameTitleCaseWithoutSpace$Interface.get_max_function_index``
        return $FeatureNameTitleCaseWithoutSpace$Model.get_base_cls().MAX_FUNCTION_INDEX$MaxFunctionIndexVersion
    # end def get_max_function_index"""

    FEATURE_CLASS_ITEM = """\n
class $FeatureNameTitleCaseWithoutSpace$V$HidppFeatureVersion($Base):
    \"\"\"
    Define ``$FeatureNameTitleCaseWithoutSpace$V$HidppFeatureVersion`` feature

    This feature provides model and unit specific information for version $HidppFeatureVersion$ReqResComment
    \"\"\"
    VERSION = $HidppFeatureVersion$InitSection$MaxIndexSection
# end class $FeatureNameTitleCaseWithoutSpace$V$HidppFeatureVersion
"""

    EMPTY_PACKET_DATA_FORMAT = """\n
# noinspection DuplicatedCode
class $EmptyPacketDataFormat($FeatureNameTitleCaseWithoutSpace):
    \"\"\"
    Define reusable class to be used as a base class for several messages in this feature$Container

    Format:
    ============================  ==========
    Name                          Bit count
    ============================  ==========
    Padding                       $BitCount
    ============================  ==========
    \"\"\"

    class FID($FeatureNameTitleCaseWithoutSpace.FID):
        # See ``$FeatureNameTitleCaseWithoutSpace.FID``
        PADDING = $FeatureNameTitleCaseWithoutSpace.FID.SOFTWARE_ID - 1
    # end class FID

    class LEN($FeatureNameTitleCaseWithoutSpace.LEN):
        # See ``$FeatureNameTitleCaseWithoutSpace.LEN``
        PADDING = $PaddingSize
    # end class LEN

    FIELDS = $FeatureNameTitleCaseWithoutSpace.FIELDS + (
        BitField(fid=FID.PADDING, length=LEN.PADDING,
                 title=\"Padding\", name=\"padding\",
                 checks=(CheckHexList(LEN.PADDING // 8), CheckByte(),),
                 default_value=$FeatureNameTitleCaseWithoutSpace.DEFAULT.PADDING),)
# end class $EmptyPacketDataFormat
"""

    MIXED_PACKET_DATA_FORMAT = """\n\nclass $FunctionName($Base):
    \"\"\"
    Define reusable class to be used as a base class for several messages in this feature.$Container$FunctionParams
    \"\"\"$FidParams$LenParams$FieldParams
# end class $FunctionName
"""

    FUNCTION_DATA_MODEL = """
                cls.INDEX.$IndexName: {
                    "request": $ApiName$VersionText,
                    "response": $ApiName$Response$VersionText
                }"""

    EVENT_DATA_MODEL_SINGLE_LINE = """
                cls.INDEX.$IndexName: {"report": $ApiName$Event}"""

    EVENT_DATA_MODEL_MULTI_LINE = """
                cls.INDEX.$IndexName: {
                    "report": $ApiName$Event}"""

    FUNCTION_DATA_VALUE_FORMAT = """\n$Space$Name$DoubleSpace$Size"""

    FUNCTION_DATA_FORMAT = """\n\n$Space$Format:
$Space$NameHashLine$DoubleSpace$BitCountHashLine
$Space$Name$DoubleSpace$BitCount
$Space$NameHashLine$DoubleSpace$BitCountHashLine$FunctionParams
$Space$NameHashLine$DoubleSpace$BitCountHashLine"""

    CLASS_FID = """\n\n    class FID($Base.FID):
        # See ``$Base.FID``$FidValue
    # end class FID"""

    CLASS_LEN = """\n\n    class LEN($Base.LEN):
        # See ``$Base.LEN``$LenValue
    # end class LEN"""

    SUBCLASS_FID = """\n\n        class FID(object):
            \"\"\"
            Field identifiers
            \"\"\"$FidValue
        # end class FID"""

    SUBCLASS_LEN = """\n\n        class LEN(object):
            \"\"\"
            Field lengths in bits
            \"\"\"$LenValue
        # end class LEN"""

    SUBCLASS_DEFAULT = """\n\n        class DEFAULT(object):
            \"\"\"
            Field default values
            \"\"\"$DefaultValue
        # end class DEFAULT"""

    NAME_VALUE_RRR_STRUCTURE = """
        self.$FunctionNameLower$Ext = $FeatureNameTitleCaseWithoutSpace$Model.$RRR(
            self.VERSION, index.$FunctionNameUpper)"""

    CLASS_REQ_STRUCTURE = """\n\nclass $FunctionName$VersionText($Base):
    \"\"\"
    Define ``$FunctionName$VersionText`` implementation class$FunctionParams
    \"\"\"$FidParams$LenParams$FieldParams

    def __init__($InitParams):
        \"\"\"
        :param device_index: Device index
        :type device_index: ``int | HexList``
        :param feature_index: Feature index
        :type feature_index: ``int | HexList``$InitParamsDoc
        :param kwargs: Potential future parameters
        :type kwargs: ``object``
        \"\"\"
        super().__init__(device_index=device_index, feature_index=feature_index,
                         function_index=$FunctionName$Response$VersionText.FUNCTION_INDEX,
                         report_id=self.DEFAULT.REPORT_ID_$ReportIdType,
                         **kwargs)$InitBody
    # end def __init__$FromHexList
# end class $FunctionName$VersionText
"""

    CLASS_RES_STRUCTURE = """\n\nclass $FunctionName$ResponseOrEvent$VersionText($Base):
    \"\"\"
    Define ``$FunctionName$ResponseOrEvent$VersionText`` implementation class$FunctionParams
    \"\"\"
    MSG_TYPE = TYPE.$ResponseOrEventUpper$RequestList
    VERSION = ($Version,)
    FUNCTION_INDEX = $FunctionIndex$FidParams$LenParams$FieldParams

    def __init__($InitParams):
        \"\"\"
        :param device_index: Device index
        :type device_index: ``int | HexList``
        :param feature_index: Feature index
        :type feature_index: ``int | HexList``$InitParamsDoc
        :param kwargs: Potential future parameters
        :type kwargs: ``object``
        \"\"\"
        super().__init__(device_index=device_index, feature_index=feature_index,
                         function_index=self.FUNCTION_INDEX,
                         report_id=self.DEFAULT.REPORT_ID_LONG,
                         **kwargs)$InitBody
    # end def __init__$FromHexList
# end class $FunctionName$ResponseOrEvent$VersionText
"""

    SUBCLASS_STRUCTURE = """\n
    # noinspection DuplicatedCode
    class $SubclassName(BitFieldContainerMixin):
        \"\"\"
        Define ``$SubclassName`` information$FunctionParams
        \"\"\"$FidParams$LenParams$DefaultParams$FieldParams
    # end class $SubclassName"""

    API_STRUCTURE = "\n\n$Space[$Index] $Name$InputParam -> $OutputParam"

    FEATURE_INTERFACE_STRUCTURE = "\n        self.$FunctionName$Ext = None"

    BITFIELD_CHECK_HEX_LIST = """
        BitField(fid=FID.$NameUpper, length=LEN.$NameUpper,
                 title=\"$NameTitle\", name=\"$NameLower\",
                 checks=(CheckHexList(LEN.$NameUpper // 8),$Check)$DefaultValue),"""

    BITFIELD_CHECK_INT = """
        BitField(fid=FID.$NameUpper, length=LEN.$NameUpper,
                 title=\"$NameTitle\", name=\"$NameLower\",
                 checks=(CheckInt(min_value=0, max_value=pow(2, LEN.$NameUpper) - 1),)$DefaultValue),"""

    BITFIELD_CHECK_LIST = """
        BitField(fid=FID.$NameUpper, length=LEN.$NameUpper,
                 title=\"$NameTitle\", name=\"$NameLower\",
                 checks=(CheckHexList(LEN.$NameUpper // 8),
                         CheckInt(min_value=0, max_value=pow(2, LEN.$NameUpper) - 1),
                         CheckList(length=LEN.$NameUpper // 8),)$DefaultValue),"""

    BITFIELD_PADDING = """
        BitField(fid=FID.PADDING, length=LEN.PADDING,
                 title=\"Padding\", name=\"padding\",
                 checks=(CheckHexList(LEN.PADDING // 8), CheckByte(),),
                 default_value=$Base.DEFAULT.PADDING),"""

    FIELDS = """\n\n    FIELDS = $Base.FIELDS + ($Fields\n    )"""

    BITFIELD_CHECK_HEX_LIST_SUB_LEVEL = """
            BitField(fid=FID.$NameUpper, length=LEN.$NameUpper,
                     title=\"$NameTitle\", name=\"$NameLower\",
                     checks=(CheckHexList(LEN.$NameUpper // 8),$Check)$DefaultValue),"""

    BITFIELD_CHECK_INT_SUB_LEVEL = """
            BitField(fid=FID.$NameUpper, length=LEN.$NameUpper,
                     title=\"$NameTitle\", name=\"$NameLower\",
                     checks=(CheckInt(min_value=0, max_value=pow(2, LEN.$NameUpper) - 1),)$DefaultValue),"""

    BITFIELD_CHECK_LIST_SUB_LEVEL = """
            BitField(fid=FID.$NameUpper, length=LEN.$NameUpper,
                     title=\"$NameTitle\", name=\"$NameLower\",
                     checks=(CheckHexList(LEN.$NameUpper // 8),
                             CheckInt(min_value=0, max_value=pow(2, LEN.$NameUpper) - 1),
                             CheckList(length=LEN.$NameUpper // 8),)$DefaultValue),"""

    FIELDS_SUB_LEVEL = """\n\n        FIELDS = ($Fields\n        )"""

    DEF_INIT_BODY = """\n        self.$Key = $Value"""

    DEF_HEXLIST_ONE_LINE = """
        inner_field_container_mixin.$FieldName = cls.$ClassName.fromHexList(
            inner_field_container_mixin.$FieldName)"""

    DEF_HEXLIST_BODY = """\n
    # noinspection PyPep8Naming
    @classmethod
    def fromHexList(cls, *args, **kwargs):
        \"\"\"
        Parse from ``HexList`` instance

        :param args: List of arguments
        :type args: ``object``
        :param kwargs: Potential future parameters
        :type kwargs: ``object``

        :return: Class instance
        :rtype: ``$Response``
        \"\"\"
        inner_field_container_mixin = super().fromHexList(*args, **kwargs)$Fields
        return inner_field_container_mixin
    # end def fromHexList"""
# end class FeatureTemplate

# ----------------------------------------------------------------------------------------------------------------------
# END OF FILE
# ----------------------------------------------------------------------------------------------------------------------
