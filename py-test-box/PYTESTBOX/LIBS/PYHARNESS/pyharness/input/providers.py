#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ------------------------------------------------------------------------------
# Python Test Harness
# ------------------------------------------------------------------------------
''' @package pyharness.input.providers

@brief Base implementation of the providers

@author christophe.roquebert

@date   2018/05/07
'''
# ------------------------------------------------------------------------------
# imports
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# implementation
# ------------------------------------------------------------------------------
class TestProvider(object):
    '''
    Base definition of a TestProvider.

    A TestProvider is an object that, given a test id (or a set of test ids),
    is able to obtain information on this test.

    Depending on the implementation, the information can be obtained:
    - locally (from log files, traces, xml files...)
    - in-memory (from a state kept in-memory)
    - remotely (from a server, a remotely running instance...)

    This is especially useful when mixing several types of input/output:
    - A local GUI instance keeping track of the test states
    - A local database, keeping track of past states
    - A remote database, keeping track of past states.
    The TestManager can see a unified interface, and work without
    serialization-specific code.
    '''

    def __init__(self, kwArgs=None):
        '''
        Constructor.

        @param kwArgs [in] (dict) The keyword arguments to the current configuration.
                           This will be used by derived classes to ibtain local
                           configuration information.
        '''
        if (kwArgs is None):
            kwArgs = {}
        # end if

        self._kwArgs = kwArgs
    # end def __init__
# end class TestProvider

class StaticTestCasesProvider(TestProvider):
    '''
    Obtains the TestCases implemented by a test, from a static analysis of the test.
    '''

    def getStaticTestCases(self, testIds):
        '''
        Obtains a list of all implemented TestCases for this test.

        @param  testIds  [in] (string, tuple) The testId or Ids for which to retrieve the TestCases

        @return The TestCases as a list<string>
        '''
        raise NotImplementedError
    # end def getStaticTestCases
# end class StaticTestCasesProvider

class TestStateTestProvider(TestProvider):
    '''
    Test state provider.

    This provider obtains, from a test id, the state of the test.
    '''

    def getTestState(self, testId, product, variant, target):
        '''
        Obtains the state of the test, from the list of constants:
        - unknown
        - success
        - failure
        - error

        @param  testId  [in] (str) The testId for which to retrieve the TestCases
        @param  product [in] (str) The product to obtain the history from
        @param  variant [in] (str) The variant to obtain the history from
        @param  target  [in] (str) The target to obtain the history from

        @return The state, as one of unknown, success, failure, error
        '''
        raise NotImplementedError
    # end def getTestState
# end class TestStateTestProvider

class PerfDataProvider(TestProvider):
    '''
    Obtains the performance data generated by a test
    '''

    def getPerfData(self, testId, product, variant, target):
        '''
        Obtains the performance data from a test

        @param testId  [in] (str) The testId for which to retrieve the TestCases
        @param product [in] (str) The product to obtain the history from
        @param variant [in] (str) The variant to obtain the history from
        @param target  [in] (str) The target to obtain the history from
        @return The performance data, as a dict<key, list<tuple<value, unit>>>
        '''
        raise NotImplementedError
    # end def getPerfData
# end class PerfDataProvider

class LogUriProvider(TestProvider):
    '''
    Obtains the log generated by a test
    '''

    def getLogUri(self, testId, product, variant, target):
        '''
        Obtains a URI to the test log

        @param testId  [in] (str) The testId for which to retrieve the TestCases
        @param product [in] (str) The product to obtain the history from
        @param variant [in] (str) The variant to obtain the history from
        @param target  [in] (str) The target to obtain the history from
        @return The log URI, or None if no log is available
        '''
        raise NotImplementedError
    # end def getLogUri
# end class LogUriProvider

class DynamicTestCasesProvider(TestProvider):
    '''
    Obtains the TestCases implemented by a test, from a dynamic analysis of the test.
    '''

    def getDynamicTestCases(self, testId, product, variant, target):
        '''
        Obtains a list of dynamically validated TestCases for this test.

        @param testId  [in] (str) The testId for which to retrieve the TestCases
        @param product [in] (str) The product to obtain the history from
        @param variant [in] (str) The variant to obtain the history from
        @param target  [in] (str) The target to obtain the history from
        @return The TestCases as a list<testCaseId, author, comment>
        '''
        raise NotImplementedError
    # end def getDynamicTestCases
# end class DynamicTestCasesProvider

class TestHistoryProvider(TestProvider):
    '''
    Provider for the test history
    '''

    def getTestHistory(self, testId, product, variant, target):
        '''
        Obtains a list of history entries for the specified test Id.

        @param testId  [in] (str) The test identifier
        @param product [in] (str) The product to obtain the history from
        @param variant [in] (str) The variant to obtain the history from
        @param target  [in] (str) The target to obtain the history from
        @return a list of tuple(tuple(state, startdate, stopdate, message))
        '''
        raise NotImplementedError
    # end def getTestHistory
# end class TestHistoryProvider

# ------------------------------------------------------------------------------
# END OF FILE
# ------------------------------------------------------------------------------
