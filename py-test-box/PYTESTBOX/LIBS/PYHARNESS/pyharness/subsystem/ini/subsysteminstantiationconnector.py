#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ------------------------------------------------------------------------------
# Python Test Harness
# ------------------------------------------------------------------------------
''' @package pyharness.subsystem.ini.subsysteminstantiationconnector

@brief  Importer/exporters for ini-instantiated subsystems

@author christophe.roquebert

@date   2018/10/20
'''
# ------------------------------------------------------------------------------
# imports
# ------------------------------------------------------------------------------
from datetime                                          import date
from os                                                import makedirs
from os.path                                           import basename
from os.path                                           import dirname
from os.path                                           import exists
from os.path                                           import expanduser
from os.path                                           import isfile
from os.path                                           import join
from os.path                                           import normpath
from os.path                                           import sep
import re
import sys

from os.path                                             import abspath
from pylibrary.tools.config                              import BaseConfigParser
from pyharness.subsystem.stringutils                     import StringUtils
from pyharness.subsystem.subsysteminstantiation          import SubSystemInstantiation
from pyharness.subsystem.subsysteminstantiationconnector import AbstractSubSystemInstantiationExporter
from pyharness.subsystem.subsysteminstantiationconnector import AbstractSubSystemInstantiationImporter
# ------------------------------------------------------------------------------
# implementation
# ------------------------------------------------------------------------------
class PySetupConstConvertor(object):
    '''
    PySetup constant reference conversion
    '''

    REGEX_PYSETUP_VAR = re.compile(r'(.*)\$\(([A-Za-z_0-9/\\]+)\)(.*)\s*$')

    @classmethod
    def convert(cls, config):
        '''
        Pre-processing of config file

        Steps:
        #- Lookup references to constants generated by refresh
        #- Replace them by their value
        .

        @param  config [in] (BaseConfigParser) BaseConfigParser to update

        @return (BaseConfigParser) BaseConfigParser ready for interpretation
        '''
        for section in config.sections():
            for option in config.options(section):

                value = config.get(section, option)

                re_match = cls.REGEX_PYSETUP_VAR.match(value)
                if re_match:
                    import pysetup
                    name = re_match.group(2)
                    if not hasattr(pysetup, name):
                        raise AttributeError('"%s" not defined in local.py by refresh process' % name)
                    # end if
                    convertedValue = re_match.group(1) + getattr(pysetup, name) + re_match.group(3)

                    config.set(section,
                               option,
                               convertedValue)
                # end if
            # end for
        # end for
        return config
    # end def convert
# end class PySetupConstConvertor

class IniSubSystemInstantiationImporter(AbstractSubSystemInstantiationImporter):
    '''
    Imports a SubSystemInstantiation from:
    - @c main.settings.ini files
    - @c VARIANT.settings.ini files
    .
    '''

    def __init__(self):
        '''
        Constructor
        '''
        super(IniSubSystemInstantiationImporter, self).__init__()

        self._normedSysPath = None
    # end def __init__

    def _getNormedSysPath(self):
        '''
        Obtians the normalized, cached sys.path

        @return sys.path, normalized
        '''
        if (self._normedSysPath is None):
            self._normedSysPath = [abspath(p) for p in sys.path]
        # end if

        return self._normedSysPath
    # end def _getNormedSysPath

    TRANSLATION_MAP = {'True':  'true',
                       'False': 'false',
                       'None':  None,
                       }

    TRANSLATION_HINT_MAP = {'True':  'boolean',
                            'False': 'boolean',
                            'None':  'auto',
                            }

    @classmethod
    def _loadFromIniFile(cls, iniFilePath):                                                                             # pylint:disable=R0912
        '''
        Loads from a .ini file

        @param  iniFilePath [in] (str) Path to the .ini file to read

        @return list of SubSystemInstantiation, with absolute paths
        '''
        result = []

        config = BaseConfigParser()
        config.read([iniFilePath])
        config = PySetupConstConvertor.convert(config)
        for subSystemInstantiationPath in config.sections():
            featureInstantiations = []
            parameterParts = {'editable' : {},
                              'choices' : {},
                              'doc' : {}}
            for featureInstantiationName in config.options(subSystemInstantiationPath):

                featureInstantiationHint = 'auto'

                # Convert True/False to true/false
                featureInstantiationValue = config.get(subSystemInstantiationPath, featureInstantiationName)

                # Convert quoted strings to unquoted
                if (    (featureInstantiationValue[:1] in ('\'"'))
                    and (featureInstantiationValue[-1:] in ('\'"'))):
                    featureInstantiationValue = featureInstantiationValue[1:-1]
                    featureInstantiationHint = 'string'
                # end if

                # Convert HexList strings to unbracketed
                if (    (featureInstantiationValue[:1] in ('['))
                    and (featureInstantiationValue[-1:] in (']'))):
                    featureInstantiationValue = featureInstantiationValue[1:-1]
                    featureInstantiationHint = 'hexlist'
                # end if

                # Translate some special values
                featureInstantiationHint = cls.TRANSLATION_HINT_MAP.get(featureInstantiationValue, featureInstantiationHint)
                featureInstantiationValue = cls.TRANSLATION_MAP.get(featureInstantiationValue, featureInstantiationValue)

                name = featureInstantiationName
                parameterPart = False
                if name[:2] in ('U_', 'C_', 'D_'):
                    parameterPart = True
                    name = name[2:]
                # end if
                present = [f for f in featureInstantiations if f.name == name]

                if parameterPart:
                    if not present:
                        if featureInstantiationName[:2] == 'U_':
                            parameterParts['editable'][name] = StringUtils.stringToPython(featureInstantiationValue, 'boolean')

                        elif featureInstantiationName[:2] == 'C_':
                            parameterParts['choices'][name] = StringUtils.stringToPython(featureInstantiationValue, 'tuple')

                        elif featureInstantiationName[:2] == 'D_':
                            parameterParts['doc'][name] = featureInstantiationValue
                        # end if

                    else:
                        if len(present) != 1:
                            raise IndexError('Duplicate feature found: %s', name)
                        # end if

                        if featureInstantiationName[:2] == 'U_':
                            present[0].editable = featureInstantiationValue

                        elif featureInstantiationName[:2] == 'C_':
                            present[0].choices = StringUtils.stringToPython(featureInstantiationValue, 'tuple')

                        elif featureInstantiationName[:2] == 'D_':
                            present[0].doc = featureInstantiationValue
                        # end if
                    # end if

                    # Part of parameter saved or updated
                    continue
                # end if

                editable = parameterParts['editable'].get(name, SubSystemInstantiation.FeatureInstantiation.UNSET)
                choices = parameterParts['choices'].get(name, SubSystemInstantiation.FeatureInstantiation.UNSET)
                doc = parameterParts['doc'].get(name, SubSystemInstantiation.FeatureInstantiation.UNSET)

                # Add the feature value
                featureInstantiations.append(SubSystemInstantiation.FeatureInstantiation(name,
                                                                                         value    = featureInstantiationValue,
                                                                                         location = iniFilePath,
                                                                                         type     = featureInstantiationHint,
                                                                                         editable = editable,
                                                                                         choices  = choices,
                                                                                         doc      = doc
                                                                                         ))
            # end for

            # Handle of remaining parts of features
            for name, editable in parameterParts['editable'].items():
                present = [f for f in featureInstantiations if f.name == name]
                if not present:
                    choices = parameterParts['choices'].get(name, SubSystemInstantiation.FeatureInstantiation.UNSET)
                    doc = parameterParts['doc'].get(name, SubSystemInstantiation.FeatureInstantiation.UNSET)

                    # Add the feature value
                    featureInstantiations.append(SubSystemInstantiation.FeatureInstantiation(name,
                                                                                             value    = SubSystemInstantiation.FeatureInstantiation.UNSET,
                                                                                             location = iniFilePath,
                                                                                             type     = 'auto',
                                                                                             editable = editable,
                                                                                             choices  = choices,
                                                                                             doc      = doc
                                                                                             ))
                # end if
            # end for

            for name, choices in parameterParts['choices'].items():
                present = [f for f in featureInstantiations if f.name == name]
                if not present:
                    doc = parameterParts['doc'].get(name, SubSystemInstantiation.FeatureInstantiation.UNSET)

                    # Add the feature value
                    featureInstantiations.append(SubSystemInstantiation.FeatureInstantiation(name,
                                                                                             value    = SubSystemInstantiation.FeatureInstantiation.UNSET,
                                                                                             location = iniFilePath,
                                                                                             type     = 'auto',
                                                                                             editable = False,
                                                                                             choices  = choices,
                                                                                             doc      = doc
                                                                                             ))
                # end if
            # end for

            for name, choices in parameterParts['doc'].items():
                present = [f for f in featureInstantiations if f.name == name]
                if not present:
                    # Add the feature value
                    featureInstantiations.append(SubSystemInstantiation.FeatureInstantiation(name,
                                                                                             value    = SubSystemInstantiation.FeatureInstantiation.UNSET,
                                                                                             location = iniFilePath,
                                                                                             type     = 'auto',
                                                                                             editable = False,
                                                                                             choices  = None,
                                                                                             doc      = doc
                                                                                             ))
                # end if
            # end for

            result.append(SubSystemInstantiation(subSystemInstantiationPath,
                                                 features = featureInstantiations,
                                                 location = iniFilePath))
        # end for

        return sorted(result,
                      key = lambda x: x.path)
    # end def _loadFromIniFile

    def _loadFromPath(self, leafPath, moveUp = True):
        '''
        Loads from a path, looking for xxx.settings.ini, and looking up until a main.settings.ini is found.

        The results are returned in reverse order: Main product, then variant, then subvariant...

        This allow simple the building of the actual subSystem by applying each SubSystemInstantiation in turn.

        @param  leafPath [in] (str) The path to look in.
        @param  moveUp   [in] (boolean) Whether to move up in the path

        @return List of SubsystemInstantiation
        '''
        result = []

        # Load from the target .ini
        baseName = basename(leafPath)

        # Look for a VARIANT.ini file
        iniFilePath = join(leafPath, baseName + '.settings.ini')
        if (isfile(iniFilePath)):
            if (moveUp):
                resultTmp = self._loadFromPath(dirname(leafPath))
                if (resultTmp is not None):
                    result.extend(resultTmp)
                else:
                    return None
                # end if
            # end if

            result.extend(self._loadFromIniFile(iniFilePath))

        else:
            iniFilePath = join(leafPath, 'main.settings.ini')
            if (isfile(iniFilePath)):
                result.extend(self._loadFromIniFile(iniFilePath))
            else:
                return None
            # end if
        # end if

        return result
    # end def _loadFromPath

    def load(self, leafPath, moveUp = True):
        '''
        @copydoc pyharness.subsystem.subsysteminstantiationconnector.AbstractSubSystemInstantiationImporter.load
        '''

        return self._loadFromPath(leafPath, moveUp)
    # end def load
# end class IniSubSystemInstantiationImporter

class IniSubSystemInstantiationExporter(AbstractSubSystemInstantiationExporter):
    '''
    Exports dict of SubSystemInstantiations:
    <ul>
      <li>@c main.settings.ini files.</li>
      <li>@c VARIANT.settings.ini files.</li>
    </ul>

    The export is raw, and does not attempt to optimize the SubSystemInstantiations
    (i.e. a feature can be set to the same value in both PRODUCT and VARIANT:
    This will not result in an empty variant.)
    '''

    def __init__(self):
        '''
        Constructor
        '''
        super(IniSubSystemInstantiationExporter, self).__init__()

        self._normedSysPath = None
    # end def __init__

    def _getNormedSysPath(self):
        '''
        Obtians the normalized, cached sys.path

        @return sys.path, normalized
        '''
        if (self._normedSysPath is None):
            self._normedSysPath = [abspath(p) for p in sys.path]
        # end if

        return self._normedSysPath
    # end def _getNormedSysPath

    TRANSLATION_MAP = {'true':  'True',
                       'false': 'False',
                       'none':  None,
                       }

    @classmethod
    def _updateConfigFile(cls, config, subSystemInstantiations):
        '''
        Updates a config file with the given instantiations.
        This does not remove sections, but clears the contents of updated sections.

        @param  config                  [in] (ConfigParser) Configuration to update.
        @param  subSystemInstantiations [in] (list) List of SubSystemInstantiation to apply
        '''
        for subSystemInstantiation in subSystemInstantiations:
            sectionName = subSystemInstantiation.path
            if not config.has_section(sectionName):
                config.add_section(sectionName)
            else:
                for optionName in config.options(sectionName):
                    config.remove_option(sectionName, optionName)
                # end for
            # end if

            for featureInstantiation in subSystemInstantiation.features:
                config.set(subSystemInstantiation.path,
                           featureInstantiation.name,
                           featureInstantiation.value)
            # end for
        # end for
    # end def _updateConfigFile

    @classmethod
    def _reinitConfigFile(cls, rootPath, iniDirRelativePath):
        '''
        Creates a new config file.
        If the file already exists, it is emptied of all its contents, except:
        - The existing header
        - The existing footer.

        Other values, such as sections and options are removed.

        @param  rootPath           [in] (str) Root directory of settings files.
        @param  iniDirRelativePath [in] (str) Path to the .ini file's parent.
                                        This is the PRODUCT/VARIANT relative path.
        @return config The new config object.
        '''

        iniDirRelativePath = normpath(iniDirRelativePath)
        if (sep in iniDirRelativePath):
            extension = '.settings.ini'
        else:
            extension = 'main.settings.ini'
        # end if

        path = join(rootPath, iniDirRelativePath, iniDirRelativePath.rsplit(sep, 1)[-1] + extension)

        config = BaseConfigParser(strict = True)

        # If the file exists, read it, otherwise initialize it
        if (isfile(path)):
            config.read([path])
        else:
            today = date.today()
            author = expanduser('~').rsplit(sep, 1)[-1]
            comments = (' ------------------------------------------------------------------------------',
                        ' Python Test Harness %04d' % (today.year,),
                        ' ------------------------------------------------------------------------------',
                        '',
                        ' [Summary]  %s configuration' % (iniDirRelativePath,),
                        '',
                        ' [author] %s' % author,
                        '',
                        r' [DateTime]   %04d/%02d/%02d' % (today.year, today.month, today.day),
                        '',
                        ' ------------------------------------------------------------------------------',
                        '',
                        ' ------------------------------------------------------------------------------',
                        )
            for comment in comments:
                config.add_comment(comment)
            # end for
        # end if

        # Remove all sections
        for section in config.sections()[:]:
            config.remove_section(section)
        # end for

        return config
    # end def _reinitConfigFile

    @classmethod
    def _updatePath(cls, rootPath, relativePath, subSystemInstantiations):
        '''
        Updates a .ini file

        @param  rootPath                [in] (str) Root path of subsystem instantiations.
        @param  relativePath            [in] (str) Relative path containing the .settings.ini
                                                   or main.settings.ini files.
        @param  subSystemInstantiations [in] (list) List of SubSystemInstantiations to save
        '''

        relativePath = normpath(relativePath)
        config = cls._reinitConfigFile(rootPath, relativePath)

        cls._updateConfigFile(config, subSystemInstantiations)

        iniParentPath = normpath(join(rootPath, relativePath))
        if not exists(iniParentPath):
            makedirs(iniParentPath)
        # end if

        # Save either to a .settings.ini or main.settings.ini
        elements = relativePath.rsplit(sep, 1)
        if (len(elements) > 1):
            fileName = elements[-1] + '.settings.ini'
        else:
            fileName = 'main.settings.ini'
        # end if

        config.write(join(iniParentPath, fileName))
    # end def _updatePath

    def save(self, rootPath, subSystemInstantiations):
        '''
        @copydoc pyharness.subsystem.subsysteminstantiationconnector.AbstractSubSystemInstantiationExporter.save
        '''
        for relativePath, childSubSystemInstantiations in subSystemInstantiations.items():
            self._updatePath(rootPath, relativePath, childSubSystemInstantiations)
        # end for
    # end def save
# end class IniSubSystemInstantiationExporter

# ------------------------------------------------------------------------------
# END OF FILE
# ------------------------------------------------------------------------------
